#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è VentAI MCP Server
–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤ —Ç–∞ MCP —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
"""

import asyncio
import json
import sys
import os
from pathlib import Path

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞
sys.path.insert(0, str(Path(__file__).parent))

from mcp_server import VentAIMCPServer

async def test_basic_functionality():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ"""
    print("üß™ Starting VentAI MCP Server Tests")
    print("=" * 50)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤–µ—Ä–∞
    server = VentAIMCPServer()
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤
    print("\n1Ô∏è‚É£ Testing AI Providers Initialization...")
    await server.initialize_ai_providers()
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å—É AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤
    print("\n2Ô∏è‚É£ Testing AI Providers Status...")
    status_result = await server.execute_tool("ai_providers_status", {})
    
    if status_result.get("success"):
        status = status_result["status"]
        print(f"‚úÖ AI Providers Status:")
        print(f"   üìä Total: {status['total_providers']}")
        print(f"   ‚úÖ Available: {status['available_providers']}")
        print(f"   üéØ Primary: {status['primary_provider']}")
        
        print("   üîç Provider Details:")
        for name, details in status["providers"].items():
            status_icon = "‚úÖ" if details["available"] else "‚ùå"
            model_info = f" ({details.get('model', 'N/A')})" if details.get('model') else ""
            print(f"     {status_icon} {name}{model_info}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        print("   üí° Recommendations:")
        for rec in status_result.get("recommendations", []):
            print(f"     {rec}")
    else:
        print(f"‚ùå AI Providers Status failed: {status_result.get('error')}")
    
    # –¢–µ—Å—Ç AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó (—è–∫—â–æ —î –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏)
    if status_result.get("success") and status_result["status"]["available_providers"] > 0:
        print("\n3Ô∏è‚É£ Testing AI Generation...")
        
        test_prompts = [
            {
                "name": "Simple greeting",
                "prompt": "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Ç–∏ –º–æ–∂–µ—à –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ HVAC —Å–∏—Å—Ç–µ–º–∞–º–∏?",
                "context": {"test": "greeting"}
            },
            {
                "name": "Technical question",
                "prompt": "–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ –µ–Ω–µ—Ä–≥–æ–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å VRF —Å–∏—Å—Ç–µ–º –≤ –£–∫—Ä–∞—ó–Ω—ñ",
                "context": {"domain": "hvac", "country": "ukraine"}
            }
        ]
        
        for i, test in enumerate(test_prompts, 1):
            print(f"\n   3.{i} Testing: {test['name']}")
            ai_result = await server.execute_tool("ai_generate", {
                "prompt": test["prompt"],
                "context": test["context"]
            })
            
            if ai_result.get("success"):
                provider = ai_result.get("provider_used", "unknown")
                response_preview = ai_result["response"][:150] + "..." if len(ai_result["response"]) > 150 else ai_result["response"]
                print(f"     ‚úÖ Success with {provider}")
                print(f"     üìù Response: {response_preview}")
            else:
                print(f"     ‚ùå Failed: {ai_result.get('error')}")
    
    # –¢–µ—Å—Ç AI HVAC –∞–Ω–∞–ª—ñ–∑—É
    if status_result.get("success") and status_result["status"]["available_providers"] > 0:
        print("\n4Ô∏è‚É£ Testing AI HVAC Analysis...")
        
        test_hvac_data = {
            "area": 150,
            "occupancy": 25,
            "climate_zone": "ukraine_zone_1",
            "current_system": "split_system",
            "building_type": "office",
            "insulation_level": "good"
        }
        
        analysis_types = ["basic", "detailed", "compliance"]
        
        for i, analysis_type in enumerate(analysis_types, 1):
            print(f"\n   4.{i} Testing {analysis_type} analysis...")
            hvac_result = await server.execute_tool("ai_hvac_analyze", {
                "hvac_data": test_hvac_data,
                "analysis_type": analysis_type
            })
            
            if hvac_result.get("success"):
                provider = hvac_result.get("provider_used", "unknown")
                analysis = hvac_result["analysis"]
                print(f"     ‚úÖ Success with {provider}")
                
                # –í–∏–≤–æ–¥–∏–º–æ –∫–ª—é—á–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                if isinstance(analysis, dict):
                    if "recommended_system" in analysis:
                        print(f"     üéØ Recommendation: {analysis['recommended_system']}")
                    if "estimated_cost_usd" in analysis:
                        print(f"     üí∞ Cost: ${analysis['estimated_cost_usd']}")
                    if "energy_efficiency" in analysis:
                        print(f"     ‚ö° Efficiency: {analysis['energy_efficiency']}")
                else:
                    preview = str(analysis)[:100] + "..." if len(str(analysis)) > 100 else str(analysis)
                    print(f"     üìù Analysis: {preview}")
            else:
                print(f"     ‚ùå Failed: {hvac_result.get('error')}")
    
    # –¢–µ—Å—Ç —Ç—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏—Ö HVAC —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
    print("\n5Ô∏è‚É£ Testing Traditional HVAC Tools...")
    
    traditional_tests = [
        {
            "name": "HVAC Optimization",
            "tool": "hvac_optimize",
            "params": {
                "area": 100,
                "occupancy": 15,
                "climate_zone": "temperate",
                "current_system": "split"
            }
        },
        {
            "name": "Project Status",
            "tool": "get_project_status",
            "params": {"project_ids": ["test_project_1"]}
        }
    ]
    
    for i, test in enumerate(traditional_tests, 1):
        print(f"\n   5.{i} Testing {test['name']}...")
        result = await server.execute_tool(test["tool"], test["params"])
        
        if result.get("success"):
            print(f"     ‚úÖ Success")
            # –ü–æ–∫–∞–∑—É—î–º–æ –∫–ª—é—á–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
            if "optimization_result" in result:
                opt = result["optimization_result"]
                print(f"     üìä Optimization: {opt}")
            if "status_info" in result:
                status = result["status_info"]
                print(f"     üìà Status: {status.get('status', 'N/A')}")
        else:
            print(f"     ‚ùå Failed: {result.get('error')}")
    
    # –ü—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    print("\n" + "=" * 50)
    print("üéØ Test Summary")
    print("=" * 50)
    
    if status_result.get("success"):
        available_ai = status_result["status"]["available_providers"]
        total_ai = status_result["status"]["total_providers"]
        
        if available_ai > 0:
            print(f"‚úÖ MCP Server: Ready for production")
            print(f"‚úÖ AI Providers: {available_ai}/{total_ai} available")
            print(f"‚úÖ Primary Provider: {status_result['status']['primary_provider']}")
            print("‚úÖ Claude 4 can now interact with VentAI!")
            
            print("\nüîß Next Steps:")
            print("1. Configure Claude to use this MCP server")
            print("2. Test with actual HVAC projects")
            print("3. Monitor performance and adjust as needed")
            
        else:
            print("‚ö†Ô∏è  MCP Server: Limited functionality")
            print("‚ùå AI Providers: None available")
            print("üí° Configure at least one AI provider for full functionality")
    else:
        print("‚ùå MCP Server: Failed to initialize")
        print("üîß Check logs and configuration")

async def test_specific_provider(provider_name: str):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    print(f"\nüéØ Testing specific provider: {provider_name}")
    print("-" * 40)
    
    server = VentAIMCPServer()
    await server.initialize_ai_providers()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    available = server.ai_manager.get_available_providers()
    if provider_name not in available:
        print(f"‚ùå Provider {provider_name} is not available")
        print(f"Available providers: {available}")
        return
    
    # –¢–µ—Å—Ç—É—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é
    print("Testing generation...")
    result = await server.execute_tool("ai_generate", {
        "prompt": "–û–ø–∏—à–∏ –ø–µ—Ä–µ–≤–∞–≥–∏ –µ–Ω–µ—Ä–≥–æ–µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏—Ö HVAC —Å–∏—Å—Ç–µ–º",
        "provider": provider_name
    })
    
    if result.get("success"):
        print(f"‚úÖ Generation successful")
        print(f"Response: {result['response'][:200]}...")
    else:
        print(f"‚ùå Generation failed: {result.get('error')}")
    
    # –¢–µ—Å—Ç—É—î–º–æ HVAC –∞–Ω–∞–ª—ñ–∑
    print("\nTesting HVAC analysis...")
    hvac_result = await server.execute_tool("ai_hvac_analyze", {
        "hvac_data": {
            "area": 200,
            "occupancy": 30,
            "climate_zone": "ukraine_zone_2",
            "current_system": "central_air"
        },
        "provider": provider_name,
        "analysis_type": "detailed"
    })
    
    if hvac_result.get("success"):
        print(f"‚úÖ HVAC analysis successful")
        analysis = hvac_result["analysis"]
        print(f"Analysis type: {type(analysis)}")
        if isinstance(analysis, dict):
            for key, value in list(analysis.items())[:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3 –∫–ª—é—á—ñ
                print(f"  {key}: {value}")
    else:
        print(f"‚ùå HVAC analysis failed: {hvac_result.get('error')}")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        # –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        provider = sys.argv[1]
        asyncio.run(test_specific_provider(provider))
    else:
        # –ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç
        asyncio.run(test_basic_functionality())
