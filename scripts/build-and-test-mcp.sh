#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±—É–¥–æ–≤–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ —Ç–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è MCP —Å–µ—Ä–≤–µ—Ä–∞

set -e

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –§—É–Ω–∫—Ü—ñ—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
cleanup() {
    log_warning "–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å—ñ–≤..."
    docker-compose -f docker-compose.dev.yml down --volumes --remove-orphans || true
}

# Trap –¥–ª—è cleanup
trap cleanup ERR INT TERM

echo "üöÄ VentAI MCP Container Build & Test Script"
echo "=============================================="

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
log_info "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É..."

required_files=(
    "docker-compose.dev.yml"
    "mcp_server.py"
    "mcp_ai_providers.py"
    "backend/requirements.txt"
    "backend/Dockerfile.dev"
    "test_mcp_container.py"
)

for file in "${required_files[@]}"; do
    if [[ ! -f "$file" ]]; then
        log_error "–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ñ–∞–π–ª: $file"
        exit 1
    fi
done

log_success "–í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏ –∑–Ω–∞–π–¥–µ–Ω–æ"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
log_info "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞..."

# –°—Ç–≤–æ—Ä—é—î–º–æ .env —Ñ–∞–π–ª —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
if [[ ! -f ".env" ]]; then
    log_warning ".env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π..."
    cat > .env << EOF
# AI API Keys (–¥–æ–¥–∞–π—Ç–µ —Å–ø—Ä–∞–≤–∂–Ω—ñ –∫–ª—é—á—ñ)
GEMINI_API_KEY=your-gemini-api-key-here
OPENAI_API_KEY=your-openai-api-key-here
ANTHROPIC_API_KEY=your-anthropic-api-key-here
PINECONE_API_KEY=your-pinecone-api-key-here
HUBSPOT_API_KEY=your-hubspot-api-key-here

# Ollama Configuration
OLLAMA_BASE_URL=http://host.docker.internal:11434
OLLAMA_MODEL=llama3.1

# AI Models
GEMINI_MODEL=gemini-1.5-flash
OPENAI_MODEL=gpt-4-turbo-preview
ANTHROPIC_MODEL=claude-3-sonnet-20240229

# Pinecone
PINECONE_ENVIRONMENT=us-west1-gcp

# Costs
LABOR_COST_PER_HOUR=50.0
ENERGY_COST_PER_KWH=0.12
EOF
    log_warning "–°—Ç–≤–æ—Ä–µ–Ω–æ .env —Ñ–∞–π–ª –∑ –∑–∞–≥–ª—É—à–∫–∞–º–∏. –î–æ–¥–∞–π—Ç–µ —Å–ø—Ä–∞–≤–∂–Ω—ñ API –∫–ª—é—á—ñ!"
fi

# –ó—É–ø–∏–Ω–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
log_info "–ó—É–ø–∏–Ω–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
docker-compose -f docker-compose.dev.yml down --volumes --remove-orphans || true

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–∏—Ö –æ–±—Ä–∞–∑—ñ–≤
log_info "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–∏—Ö –æ–±—Ä–∞–∑—ñ–≤..."
docker images | grep ventai | grep dev | awk '{print $3}' | xargs -r docker rmi -f || true

# –ü–µ—Ä–µ–±—É–¥–æ–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
log_info "–ü–µ—Ä–µ–±—É–¥–æ–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
if ! docker-compose -f docker-compose.dev.yml build --no-cache; then
    log_error "–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–±—É–¥–æ–≤–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"
    exit 1
fi

log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –ø–µ—Ä–µ–±—É–¥–æ–≤–∞–Ω–æ"

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
log_info "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
if ! docker-compose -f docker-compose.dev.yml up -d; then
    log_error "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"
    exit 1
fi

log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑–∞–ø—É—â–µ–Ω–æ"

# –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤
log_info "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤..."

max_wait=120
wait_time=0

while [ $wait_time -lt $max_wait ]; do
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ PostgreSQL
    if docker-compose -f docker-compose.dev.yml exec -T db pg_isready -U ventai_dev -d ventai_dev >/dev/null 2>&1; then
        log_success "PostgreSQL –≥–æ—Ç–æ–≤–∏–π"
        break
    fi
    
    sleep 2
    wait_time=$((wait_time + 2))
    echo -n "."
done

if [ $wait_time -ge $max_wait ]; then
    log_error "–¢–∞–π–º–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è PostgreSQL"
    docker-compose -f docker-compose.dev.yml logs db
    exit 1
fi

# –û—á—ñ–∫—É–≤–∞–Ω–Ω—è Backend
log_info "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è Backend —Å–µ—Ä–≤—ñ—Å—É..."
max_wait=60
wait_time=0

while [ $wait_time -lt $max_wait ]; do
    if curl -f http://localhost:8000/docs >/dev/null 2>&1; then
        log_success "Backend –≥–æ—Ç–æ–≤–∏–π"
        break
    fi
    
    sleep 2
    wait_time=$((wait_time + 2))
    echo -n "."
done

if [ $wait_time -ge $max_wait ]; then
    log_warning "Backend –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î, –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ..."
fi

# –û—á—ñ–∫—É–≤–∞–Ω–Ω—è MCP —Å–µ—Ä–≤–µ—Ä–∞
log_info "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è MCP —Å–µ—Ä–≤–µ—Ä–∞..."
max_wait=60
wait_time=0

while [ $wait_time -lt $max_wait ]; do
    if curl -f http://localhost:8001/health >/dev/null 2>&1; then
        log_success "MCP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏–π"
        break
    fi
    
    sleep 2
    wait_time=$((wait_time + 2))
    echo -n "."
done

if [ $wait_time -ge $max_wait ]; then
    log_error "MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î"
    log_info "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–≥–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞..."
    docker-compose -f docker-compose.dev.yml logs mcp-server
    exit 1
fi

# –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
log_info "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:"
docker-compose -f docker-compose.dev.yml ps

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è MCP —Å–µ—Ä–≤–µ—Ä–∞..."

if python3 test_mcp_container.py; then
    log_success "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–π—à–ª–æ —É—Å–ø—ñ—à–Ω–æ!"
    
    echo ""
    echo "üéâ VentAI MCP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!"
    echo "=============================================="
    echo "üìã –î–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏:"
    echo "   üîó MCP Server Health: http://localhost:8001/health"
    echo "   üìä MCP Server Status: http://localhost:8001/status"
    echo "   üõ†  MCP Capabilities: http://localhost:8001/capabilities"
    echo "   üåê Backend API: http://localhost:8000/docs"
    echo "   üñ•  Frontend: http://localhost:3000"
    echo ""
    echo "ü§ñ –î–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Claude 4:"
    echo "   1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ .vscode/mcp.json"
    echo "   2. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ Claude 4 –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ MCP —Å–µ—Ä–≤–µ—Ä—ñ–≤"
    echo "   3. –¢–µ—Å—Ç—É–π—Ç–µ –∑–∞–ø–∏—Ç–∏ —Ç–∏–ø—É '–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π HVAC —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ—Ñ—ñ—Å—É 100–º¬≤'"
    echo ""
    echo "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: .vscode/MCP_README.md"
    echo "üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: .vscode/MCP_ROLE_EXPLANATION.md"
    
else
    log_error "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –ø—Ä–æ–π—à–ª–æ"
    
    echo ""
    echo "üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º:"
    echo "=============================================="
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ª–æ–≥–∏ –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
    log_info "–õ–æ–≥–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞:"
    docker-compose -f docker-compose.dev.yml logs --tail=20 mcp-server
    
    echo ""
    log_info "–õ–æ–≥–∏ Backend:"
    docker-compose -f docker-compose.dev.yml logs --tail=20 backend
    
    echo ""
    log_info "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:"
    docker-compose -f docker-compose.dev.yml ps
    
    echo ""
    log_warning "–î–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:"
    echo "   docker-compose -f docker-compose.dev.yml logs [service_name]"
    echo "   docker-compose -f docker-compose.dev.yml exec [service_name] bash"
    
    exit 1
fi

# –û–ø—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
echo ""
echo "üéõ  –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:"
echo "   üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose -f docker-compose.dev.yml restart"
echo "   üõë –ó—É–ø–∏–Ω–∫–∞: docker-compose -f docker-compose.dev.yml down"
echo "   üìú –õ–æ–≥–∏: docker-compose -f docker-compose.dev.yml logs -f [service]"
echo "   üß™ –ü–æ–≤—Ç–æ—Ä–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: python3 test_mcp_container.py"

log_success "–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!"
