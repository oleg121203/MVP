#!/bin/bash

# VentAI MCP Server Startup Script
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Claude 4

set -e

echo "üöÄ Starting VentAI MCP Environment for Claude 4..."

PROJECT_ROOT="/Users/olegkizyma/workspaces/MVP/ventai-app"
cd "$PROJECT_ROOT"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ –≤–∏–≤–æ–¥—É
print_status() {
    local status=$1
    local message=$2
    case $status in
        "success") echo "‚úÖ $message" ;;
        "warning") echo "‚ö†Ô∏è  $message" ;;
        "error") echo "‚ùå $message" ;;
        "info") echo "‚ÑπÔ∏è  $message" ;;
        *) echo "$message" ;;
    esac
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
print_status "info" "Checking MCP configuration files..."

required_files=(
    ".vscode/mcp.json"
    ".vscode/mcp-config.json"
    "mcp_server.py"
    "test_mcp.py"
)

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        print_status "success" "$file exists"
    else
        print_status "error" "$file missing"
        exit 1
    fi
done

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
env_files=(".env.development" ".env.mcp" ".env")
for env_file in "${env_files[@]}"; do
    if [ -f "$env_file" ]; then
        source "$env_file"
        print_status "success" "Loaded environment from $env_file"
        break
    fi
done

# –ï–∫—Å–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
export VENTAI_PROJECT_ROOT="$PROJECT_ROOT"
export PYTHONPATH="$PROJECT_ROOT/backend/src"
export MCP_LOG_LEVEL="${MCP_LOG_LEVEL:-INFO}"
export APP_ENV="${APP_ENV:-development}"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–ø—É—â–µ–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
check_service() {
    local service_name=$1
    local port=$2
    
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        print_status "success" "$service_name is running on port $port"
        return 0
    else
        print_status "warning" "$service_name is not running on port $port"
        return 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—É –≤ —Ñ–æ–Ω—ñ
start_service() {
    local service_name=$1
    local command=$2
    local log_file=$3
    local port=$4
    
    if check_service "$service_name" "$port"; then
        return 0
    fi
    
    print_status "info" "Starting $service_name..."
    nohup $command > "$log_file" 2>&1 &
    
    # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—É
    local wait_time=0
    while [ $wait_time -lt 30 ]; do
        if check_service "$service_name" "$port"; then
            print_status "success" "$service_name started successfully"
            return 0
        fi
        sleep 2
        wait_time=$((wait_time + 2))
    done
    
    print_status "error" "Failed to start $service_name after 30 seconds"
    return 1
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∑–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤—ñ—Å—ñ–≤
print_status "info" "Checking Docker services..."

if ! docker info >/dev/null 2>&1; then
    print_status "warning" "Docker is not running. Please start Docker Desktop."
else
    # –ó–∞–ø—É—Å–∫ PostgreSQL —ñ Redis
    if [ -f "docker-compose.dev.yml" ]; then
        print_status "info" "Starting database services..."
        docker-compose -f docker-compose.dev.yml up -d postgres redis
        sleep 5
    elif [ -f "docker-compose-db.yml" ]; then
        print_status "info" "Starting database services..."
        docker-compose -f docker-compose-db.yml up -d
        sleep 5
    fi
fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
check_service "PostgreSQL" 5433 || print_status "warning" "Start with: ./start-db-services.sh"
check_service "Redis" 6380 || print_status "warning" "Start with: ./start-db-services.sh"

# –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞
cd "$PROJECT_ROOT/backend/src"
start_service "FastAPI Backend" \
    "python -m uvicorn fastapi_app.main:app --reload --host 0.0.0.0 --port 8000" \
    "/tmp/ventai-backend.log" \
    8000

# –ó–∞–ø—É—Å–∫ Frontend —Å–µ—Ä–≤–µ—Ä–∞
cd "$PROJECT_ROOT/frontend"
if [ -f "package.json" ]; then
    start_service "Next.js Frontend" \
        "npm run dev" \
        "/tmp/ventai-frontend.log" \
        3000
fi

cd "$PROJECT_ROOT"

# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è MCP –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
print_status "info" "Testing MCP configuration..."
if python test_mcp.py; then
    print_status "success" "MCP configuration test passed"
else
    print_status "warning" "MCP configuration test failed (see above for details)"
fi

# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è MCP —Å–µ—Ä–≤–µ—Ä–∞
print_status "info" "Testing MCP server..."
timeout 10s python mcp_server.py || print_status "info" "MCP server test completed"

echo ""
echo "üéØ VentAI MCP Environment Summary"
echo "=================================="
print_status "info" "Project Root: $PROJECT_ROOT"
print_status "info" "Backend API: http://localhost:8000"
print_status "info" "Frontend: http://localhost:3000"
print_status "info" "PostgreSQL: localhost:5433"
print_status "info" "Redis: localhost:6380"

echo ""
echo "üìã MCP Servers Configured for Claude 4:"
echo "- ventai-main: Main VentAI AI services"
echo "- ventai-filesystem: File system access"

echo ""
echo "üîß Available Tools for Claude:"
echo "- hvac_optimize: –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è HVAC —Å–∏—Å—Ç–µ–º"
echo "- project_analyze: –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–µ–∫—Ç—ñ–≤"
echo "- cost_optimize: –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ"
echo "- material_search: –ü–æ—à—É–∫ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤"
echo "- procurement_analyze: –ê–Ω–∞–ª—ñ–∑ –∑–∞–∫—É–ø—ñ–≤–µ–ª—å"
echo "- crm_sync: –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ CRM"
echo "- get_project_status: –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç—ñ–≤"

echo ""
echo "üí° How to use with Claude 4:"
echo "1. ‚úÖ Environment is now ready"
echo "2. üñ•  Open Claude Desktop application"
echo "3. ‚öôÔ∏è  Check Settings > MCP Servers (should auto-detect from .vscode/mcp.json)"
echo "4. üéØ Ask Claude about VentAI projects, HVAC calculations, cost optimization, etc."

echo ""
echo "üîç Example prompts for Claude:"
echo "- '–†–æ–∑—Ä–∞—Ö—É–π –≤–µ–Ω—Ç–∏–ª—è—Ü—ñ—é –¥–ª—è –æ—Ñ—ñ—Å—É 200–º¬≤ –Ω–∞ 50 –æ—Å—ñ–±'"
echo "- '–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –î–ë–ù'"
echo "- '–ó–Ω–∞–π–¥–∏ —Å–ø–æ—Å–æ–±–∏ –∑–º–µ–Ω—à–∏—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç—É –Ω–∞ 20%'"
echo "- '–Ø–∫—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è —Ü—ñ—î—ó –≤–µ–Ω—Ç–∏–ª—è—Ü—ñ–π–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏?'"

echo ""
echo "üìä Monitoring:"
echo "- Backend logs: tail -f /tmp/ventai-backend.log"
echo "- Frontend logs: tail -f /tmp/ventai-frontend.log"
echo "- Test MCP: python test_mcp.py"
echo "- Restart services: ./start-mcp.sh"

echo ""
print_status "success" "VentAI MCP environment is ready for Claude 4! üéâ"
