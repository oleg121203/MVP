services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ventai-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ventai_dev
      POSTGRES_USER: ventai_dev
      POSTGRES_PASSWORD: ventai_dev_password
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - ventai-dev-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "ventai_dev", "-d", "ventai_dev"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for development
  redis:
    image: redis:7-alpine
    container_name: ventai-redis-dev
    restart: unless-stopped
    ports:
      - "6380:6379"
    networks:
      - ventai-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Backend for development (with auto-reload)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ventai-backend-dev
    image: ventai-backend-dev:latest
    restart: unless-stopped
    working_dir: /app
    environment:
      DATABASE_URL: postgresql://ventai_dev:ventai_dev_password@db:5432/ventai_dev
      SECRET_KEY: dev-secret-key-change-in-production
      ENCRYPTION_KEY: P-K5ljoDHJvr7AU-P-gsY3wtTuXAP-3PyuR7nfQsPE8=
      GEMINI_API_KEY: ${GEMINI_API_KEY:-mock-development-key}
      REDIS_URL: redis://redis:6379/0
      ENVIRONMENT: development
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    user: appuser # Ensure service runs as the non-root user defined in Dockerfile.dev
    command: ["sh", "-c", "python -m pip install -r requirements.txt && python -m uvicorn src.fastapi_app.main:app --host 0.0.0.0 --port 8000 --reload"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ventai-dev-network
    # Temporarily disable healthcheck to debug startup issues
    # healthcheck:
    #   test: ["CMD", "wget", "-qO-", "http://localhost:8000/health", "||", "exit", "1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # Frontend development server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: ventai-frontend-dev
    image: ventai-frontend-dev:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://backend:8000
      CHOKIDAR_USEPOLLING: "true"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      backend:
        condition: service_started  # Changed to service_started to allow startup even if backend is not healthy
    networks:
      - ventai-dev-network
    command: ["npm", "start", "--", "--port", "3000"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_dev_data:
    name: ventai_postgres_dev_data
  frontend_node_modules:
    name: ventai_frontend_node_modules

networks:
  ventai-dev-network:
    name: ventai-dev-network
    driver: bridge
