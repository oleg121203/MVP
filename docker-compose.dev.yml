services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ventai-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ventai_dev
      POSTGRES_USER: ventai_dev
      POSTGRES_PASSWORD: ventai_dev_password
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - ventai-dev-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "ventai_dev", "-d", "ventai_dev"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for development
  redis:
    image: redis:7-alpine
    container_name: ventai-redis-dev
    restart: unless-stopped
    ports:
      - "6380:6379"
    networks:
      - ventai-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Backend for development (with auto-reload)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ventai-backend-dev
    image: ventai-backend-dev:latest
    restart: unless-stopped
    working_dir: /app
    environment:
      DATABASE_URL: postgresql://ventai_dev:ventai_dev_password@db:5432/ventai_dev
      SECRET_KEY: dev-secret-key-change-in-production
      ENCRYPTION_KEY: P-K5ljoDHJvr7AU-P-gsY3wtTuXAP-3PyuR7nfQsPE8=
      GEMINI_API_KEY: ${GEMINI_API_KEY:-mock-development-key}
      REDIS_URL: redis://redis:6379/0
      ENVIRONMENT: development
      PYTHONPATH: /app
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    user: appuser # Ensure service runs as the non-root user defined in Dockerfile.dev
    command: ["sh", "-c", "python -m uvicorn src.fastapi_app.main:app --host 0.0.0.0 --port 8000 --reload"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ventai-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend development server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: ventai-frontend-dev
    image: ventai-frontend-dev:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://backend:8000
      CHOKIDAR_USEPOLLING: "true"
      DISABLE_ESLINT_PLUGIN: "true"
      ESLINT_NO_DEV_ERRORS: "true"
      ESLINT_CACHE_LOCATION: /tmp/.eslintcache
      GENERATE_SOURCEMAP: "false"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ventai-dev-network
    command: ["npm", "start"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Server for Claude 4 integration
  mcp-server:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ventai-mcp-server-dev
    image: ventai-mcp-server-dev:latest
    restart: unless-stopped
    working_dir: /app
    environment:
      # Database connection
      DATABASE_URL: postgresql://ventai_dev:ventai_dev_password@db:5432/ventai_dev
      REDIS_URL: redis://redis:6379/0
      
      # MCP specific
      VENTAI_PROJECT_ROOT: /app
      MCP_LOG_LEVEL: INFO
      PYTHONPATH: /app
      
      # AI Providers
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL:-http://host.docker.internal:11434}
      OLLAMA_MODEL: ${OLLAMA_MODEL:-llama3.1}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GEMINI_MODEL: ${GEMINI_MODEL:-gemini-1.5-flash}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4-turbo-preview}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      ANTHROPIC_MODEL: ${ANTHROPIC_MODEL:-claude-3-sonnet-20240229}
      
      # VentAI specific
      PINECONE_API_KEY: ${PINECONE_API_KEY}
      PINECONE_ENVIRONMENT: ${PINECONE_ENVIRONMENT:-us-west1-gcp}
      HUBSPOT_API_KEY: ${HUBSPOT_API_KEY}
      LABOR_COST_PER_HOUR: ${LABOR_COST_PER_HOUR:-50.0}
      ENERGY_COST_PER_KWH: ${ENERGY_COST_PER_KWH:-0.12}
    volumes:
      - ./backend:/app
      - ./mcp_server.py:/app/mcp_server.py
      - ./mcp_ai_providers.py:/app/mcp_ai_providers.py
      - mcp_logs:/app/logs/mcp
    ports:
      - "8001:8001"  # MCP server port
    user: appuser
    command: ["python", "/app/mcp_server.py"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - ventai-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_dev_data:
    name: ventai_postgres_dev_data
  frontend_node_modules:
    name: ventai_frontend_node_modules
  mcp_logs:
    name: ventai_mcp_logs

networks:
  ventai-dev-network:
    name: ventai-dev-network
    driver: bridge
