name: Release Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: 'v1.0.0'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Create Release Artifacts
  build-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && pip install -r requirements.txt

      - name: Run full test suite
        run: |
          npm run test:all
          npm run lint
          npm run format:check

      - name: Build production artifacts
        run: |
          npm run build:all

      - name: Create deployment package
        run: |
          mkdir -p release-artifacts
          
          # Package frontend build
          cd frontend/build
          tar -czf ../../release-artifacts/frontend-${{ steps.version.outputs.version }}.tar.gz .
          cd ../..
          
          # Package backend
          cd backend
          tar -czf ../release-artifacts/backend-${{ steps.version.outputs.version }}.tar.gz \
            --exclude=__pycache__ \
            --exclude=*.pyc \
            --exclude=venv \
            --exclude=.pytest_cache \
            src/ requirements.txt Dockerfile.prod
          cd ..
          
          # Package infrastructure
          tar -czf release-artifacts/infrastructure-${{ steps.version.outputs.version }}.tar.gz \
            infra/ scripts/ docker-compose.prod.yml

      - name: Generate release notes
        run: |
          echo "# VentAI Release ${{ steps.version.outputs.version }}" > release-artifacts/RELEASE_NOTES.md
          echo "" >> release-artifacts/RELEASE_NOTES.md
          echo "## ðŸš€ What's New" >> release-artifacts/RELEASE_NOTES.md
          echo "- Production-ready enterprise architecture" >> release-artifacts/RELEASE_NOTES.md
          echo "- Complete CI/CD pipeline with security scanning" >> release-artifacts/RELEASE_NOTES.md
          echo "- Kubernetes deployment manifests" >> release-artifacts/RELEASE_NOTES.md
          echo "- Comprehensive monitoring and alerting" >> release-artifacts/RELEASE_NOTES.md
          echo "- Performance testing and optimization" >> release-artifacts/RELEASE_NOTES.md
          echo "" >> release-artifacts/RELEASE_NOTES.md
          echo "## ðŸ“¦ Deployment" >> release-artifacts/RELEASE_NOTES.md
          echo "1. Download release artifacts" >> release-artifacts/RELEASE_NOTES.md
          echo "2. Configure environment variables" >> release-artifacts/RELEASE_NOTES.md
          echo "3. Deploy using provided scripts" >> release-artifacts/RELEASE_NOTES.md
          echo "" >> release-artifacts/RELEASE_NOTES.md
          echo "## ðŸ”§ Technical Details" >> release-artifacts/RELEASE_NOTES.md
          echo "- Node.js: ${{ env.NODE_VERSION }}" >> release-artifacts/RELEASE_NOTES.md
          echo "- Python: ${{ env.PYTHON_VERSION }}" >> release-artifacts/RELEASE_NOTES.md
          echo "- Built: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release-artifacts/RELEASE_NOTES.md
          echo "- Commit: ${{ github.sha }}" >> release-artifacts/RELEASE_NOTES.md

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts-${{ steps.version.outputs.version }}
          path: release-artifacts/

  # Security and Compliance Check
  security-audit:
    runs-on: ubuntu-latest
    needs: [build-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run comprehensive security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'VentAI'
          path: '.'
          format: 'HTML'

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports-${{ needs.build-release.outputs.version }}
          path: reports/

  # Build and Push Production Images
  build-production-images:
    runs-on: ubuntu-latest
    needs: [build-release, security-audit]
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: secrets.DOCKERHUB_USERNAME != ''
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}/backend
            ${{ secrets.DOCKERHUB_USERNAME }}/ventai-backend
          tags: |
            type=raw,value=${{ needs.build-release.outputs.version }}
            type=raw,value=latest

      - name: Build and push backend production image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}/frontend
            ${{ secrets.DOCKERHUB_USERNAME }}/ventai-frontend
          tags: |
            type=raw,value=${{ needs.build-release.outputs.version }}
            type=raw,value=latest

      - name: Build and push frontend production image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-production-images]
    environment: production
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying VentAI ${{ needs.build-release.outputs.version }} to production"
          echo "Backend image: ${{ needs.build-production-images.outputs.backend-image }}"
          echo "Frontend image: ${{ needs.build-production-images.outputs.frontend-image }}"
          
          # Add production deployment commands here
          # Example: kubectl, helm, terraform, etc.

      - name: Create deployment record
        run: |
          echo "Deployment completed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Version: ${{ needs.build-release.outputs.version }}"
          echo "Images deployed:"
          echo "  Backend: ${{ needs.build-production-images.outputs.backend-image }}"
          echo "  Frontend: ${{ needs.build-production-images.outputs.frontend-image }}"

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd tests/performance
          npm install

      - name: Run performance tests
        run: |
          cd tests/performance
          ./run-performance-tests.sh --production

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports-${{ needs.build-release.outputs.version }}
          path: tests/performance/reports/
