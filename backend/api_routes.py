#!/usr/bin/env python3
"""
VentAI API Routes - —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è MCP —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ —É –≤–µ–±-API
"""

from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from typing import Dict, Any, Optional, List
import asyncio
from mcp_ai_providers import AIProviderManager

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏ (—Ç—ñ —Å–∞–º—ñ, —â–æ –π –≤ MCP)
ai_manager = AIProviderManager()

router = APIRouter(prefix="/api/v1", tags=["HVAC AI"])

# Pydantic –º–æ–¥–µ–ª—ñ –¥–ª—è API
class HVACAnalysisRequest(BaseModel):
    area: float
    occupancy: int
    climate_zone: str
    current_system: Optional[str] = None
    building_type: Optional[str] = "office"

class HVACAnalysisResponse(BaseModel):
    success: bool
    analysis: Dict[str, Any]
    provider_used: str
    recommendations: List[str]
    error: Optional[str] = None

class AIPromptRequest(BaseModel):
    prompt: str
    context: Optional[Dict[str, Any]] = None
    preferred_provider: Optional[str] = None

@router.on_event("startup")
async def initialize_ai_providers():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("ü§ñ Initializing AI providers for production...")
    results = await ai_manager.initialize_all()
    
    available = ai_manager.get_available_providers()
    print(f"‚úÖ Available AI providers: {available}")
    
    if not available:
        print("‚ö†Ô∏è  Warning: No AI providers available!")

@router.post("/hvac/analyze", response_model=HVACAnalysisResponse)
async def analyze_hvac_system(request: HVACAnalysisRequest):
    """
    –ê–Ω–∞–ª—ñ–∑ HVAC —Å–∏—Å—Ç–µ–º–∏ - —Ç–∞ —Å–∞–º–∞ –ª–æ–≥—ñ–∫–∞, —â–æ –±—É–ª–∞ –≤ MCP
    """
    try:
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç —É —Ñ–æ—Ä–º–∞—Ç –¥–ª—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        hvac_data = {
            "area": request.area,
            "occupancy": request.occupancy,
            "climate_zone": request.climate_zone,
            "current_system": request.current_system,
            "building_type": request.building_type
        }
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—É —Å–∞–º—É –ª–æ–≥—ñ–∫—É, —â–æ –π –≤ MCP —Å–µ—Ä–≤–µ—Ä—ñ
        available_providers = ai_manager.get_available_providers()
        if not available_providers:
            raise HTTPException(status_code=503, detail="No AI providers available")
        
        # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        provider_name = available_providers[0]
        result = await ai_manager.analyze_hvac_with_provider(provider_name, hvac_data)
        
        return HVACAnalysisResponse(
            success=True,
            analysis=result,
            provider_used=provider_name,
            recommendations=result.get("recommendations", [])
        )
        
    except Exception as e:
        return HVACAnalysisResponse(
            success=False,
            analysis={},
            provider_used="none",
            recommendations=[],
            error=str(e)
        )

@router.post("/ai/generate")
async def ai_generate(request: AIPromptRequest):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è AI –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ - –µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç MCP ai_generate
    """
    try:
        # –î–æ–¥–∞—î–º–æ VentAI –∫–æ–Ω—Ç–µ–∫—Å—Ç
        ventai_context = {
            "system_info": "–¢–∏ AI –µ–∫—Å–ø–µ—Ä—Ç VentAI –¥–ª—è HVAC —Å–∏—Å—Ç–µ–º –≤ –£–∫—Ä–∞—ó–Ω—ñ. –ó–Ω–∞—î—à –î–ë–ù –í.2.5-67:2013.",
            **(request.context or {})
        }
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback –ª–æ–≥—ñ–∫—É
        if request.preferred_provider:
            response = await ai_manager.generate_with_provider(
                request.preferred_provider, 
                request.prompt, 
                ventai_context
            )
            return {
                "success": True,
                "response": response,
                "provider_used": request.preferred_provider
            }
        else:
            return await ai_manager.generate_with_fallback(
                request.prompt, 
                ventai_context
            )
            
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "response": ""
        }

@router.get("/ai/providers/status")
async def ai_providers_status():
    """
    –°—Ç–∞—Ç—É—Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤ - –µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç MCP ai_providers_status
    """
    try:
        available_providers = ai_manager.get_available_providers()
        all_providers = list(ai_manager.providers.keys())
        
        provider_details = {}
        for name, provider in ai_manager.providers.items():
            provider_details[name] = {
                "available": provider.is_available,
                "name": provider.name
            }
            
            if hasattr(provider, 'model'):
                provider_details[name]["model"] = provider.model
                
        return {
            "success": True,
            "status": {
                "total_providers": len(all_providers),
                "available_providers": len(available_providers),
                "primary_provider": ai_manager.primary_provider,
                "providers": provider_details
            }
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }

@router.get("/ai/providers")
async def get_available_providers():
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤"""
    return {
        "providers": ai_manager.get_available_providers(),
        "primary": ai_manager.primary_provider
    }

# –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ—Å–Ω—É—é—á–∏–º –∫–æ–¥–æ–º
@router.post("/chat")
async def chat_with_ai_endpoint(prompt: str):
    """
    –ü—Ä–æ—Å—Ç–∏–π —á–∞—Ç endpoint –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    """
    try:
        result = await ai_manager.generate_with_fallback(
            prompt,
            {"system_info": "–¢–∏ AI –µ–∫—Å–ø–µ—Ä—Ç VentAI –¥–ª—è HVAC —Å–∏—Å—Ç–µ–º –≤ –£–∫—Ä–∞—ó–Ω—ñ."}
        )
        
        if result.get("success"):
            return {
                "reply": result["response"],
                "suggestions": ["–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –µ–Ω–µ—Ä–≥–æ–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏"],
                "provider": result.get("provider_used")
            }
        else:
            return {
                "reply": f"–ü–æ–º–∏–ª–∫–∞ AI: {result.get('error')}",
                "suggestions": ["–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ"],
                "provider": "none"
            }
            
    except Exception as e:
        return {
            "reply": f"–°–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}",
            "suggestions": ["–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"],
            "provider": "none"
        }
