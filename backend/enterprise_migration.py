#!/usr/bin/env python3
"""
VentAI Enterprise Database Migration
–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö enterprise —Ç–∞–±–ª–∏—Ü—å —Ç–∞ —ñ–Ω–¥–µ–∫—Å—ñ–≤
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–¥–∞—î–º–æ backend –¥–æ —à–ª—è—Ö—É
sys.path.append(str(Path(__file__).parent))

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from enterprise_database_schema import Base
from datetime import datetime

# Database configuration
DATABASE_URL = os.getenv(
    'DATABASE_URL', 
    'postgresql://ventai_dev:ventai_dev_password@localhost:5433/ventai_dev'
)

async def create_enterprise_tables():
    """–°—Ç–≤–æ—Ä—é—î –≤—Å—ñ enterprise —Ç–∞–±–ª–∏—Ü—ñ"""
    print("üöÄ –ü–æ—á–∞—Ç–æ–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó VentAI Enterprise Database...")
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ engine
        engine = create_engine(DATABASE_URL)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ
        print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å...")
        Base.metadata.create_all(engine)
        
        print("‚úÖ –í—Å—ñ enterprise —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name LIKE '%project%' OR table_name LIKE '%client%' OR table_name LIKE '%supplier%'
                ORDER BY table_name;
            """))
            
            tables = result.fetchall()
            print(f"\nüìã –°—Ç–≤–æ—Ä–µ–Ω—ñ enterprise —Ç–∞–±–ª–∏—Ü—ñ ({len(tables)}):")
            for table in tables:
                print(f"  ‚úì {table[0]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å: {e}")
        return False

async def insert_sample_data():
    """–í—Å—Ç–∞–≤–ª—è—î –∑—Ä–∞–∑–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("\nüîÑ –í—Å—Ç–∞–≤–∫–∞ –∑—Ä–∞–∑–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...")
    
    try:
        engine = create_engine(DATABASE_URL)
        Session = sessionmaker(bind=engine)
        
        with Session() as session:
            # –í—Å—Ç–∞–≤–ª—è—î–º–æ –∑—Ä–∞–∑–∫–æ–≤—ñ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ SQL
            sample_data_sql = """
            -- –ó—Ä–∞–∑–∫–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç
            INSERT INTO clients (
                id, name, company_name, client_type, email, phone, 
                city, lead_score, lifecycle_stage, created_at
            ) VALUES (
                gen_random_uuid(), 
                '–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ', 
                '–ë—É–¥–Ü–Ω–≤–µ—Å—Ç –õ–¢–î', 
                'enterprise',
                'ivan@budinvest.com.ua',
                '+380671234567',
                '–ö–∏—ó–≤',
                8.5,
                'prospect',
                NOW()
            ) ON CONFLICT DO NOTHING;
            
            -- –ó—Ä–∞–∑–∫–æ–≤–∏–π –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫
            INSERT INTO suppliers (
                id, name, company_type, website, email, phone,
                city, reliability_score, quality_score, is_active, created_at
            ) VALUES (
                gen_random_uuid(),
                '–í–µ–Ω—Ç–¢–µ—Ö–°–µ—Ä–≤—ñ—Å',
                'manufacturer',
                'https://venttechservice.ua',
                'sales@venttechservice.ua',
                '+380443334455',
                '–ö–∏—ó–≤',
                9.2,
                8.8,
                true,
                NOW()
            ) ON CONFLICT DO NOTHING;
            
            -- –ó—Ä–∞–∑–∫–æ–≤–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª
            INSERT INTO materials (
                id, name, category, material_type, base_price, 
                currency, unit_of_measure, availability_status, created_at
            ) VALUES (
                gen_random_uuid(),
                '–ü–æ–≤—ñ—Ç—Ä–æ–≤–æ–¥ –∫—Ä—É–≥–ª–∏–π –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–∏–π √ò200–º–º',
                'ductwork',
                'galvanized_steel',
                75.50,
                'UAH',
                'm',
                'in_stock',
                NOW()
            ) ON CONFLICT DO NOTHING;
            """
            
            session.execute(text(sample_data_sql))
            session.commit()
        
        print("‚úÖ –ó—Ä–∞–∑–∫–æ–≤—ñ –¥–∞–Ω—ñ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑—Ä–∞–∑–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö: {e}")
        return False

async def verify_database():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
    
    try:
        engine = create_engine(DATABASE_URL)
        
        with engine.connect() as conn:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ —É –∫–ª—é—á–æ–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—è—Ö
            tables_to_check = [
                'projects', 'project_analytics', 'cost_analyses',
                'suppliers', 'materials', 'price_quotes',
                'clients', 'client_interactions', 'calculation_results'
            ]
            
            for table in tables_to_check:
                try:
                    result = conn.execute(text(f"SELECT COUNT(*) FROM {table}"))
                    count = result.scalar()
                    print(f"  üìä {table}: {count} –∑–∞–ø–∏—Å—ñ–≤")
                except Exception as e:
                    print(f"  ‚ùå {table}: –ø–æ–º–∏–ª–∫–∞ - {e}")
        
        print("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        return False

async def create_enterprise_views():
    """–°—Ç–≤–æ—Ä—é—î –∫–æ—Ä–∏—Å–Ω—ñ views –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏"""
    print("\nüìà –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏—Ö views...")
    
    views_sql = """
    -- View –¥–ª—è –ø—Ä–æ–µ–∫—Ç–Ω–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
    CREATE OR REPLACE VIEW project_summary_view AS
    SELECT 
        p.id,
        p.name,
        p.status,
        p.total_area,
        p.budget,
        p.estimated_cost,
        p.actual_cost,
        c.name as client_name,
        c.company_name,
        pa.cost_per_m2,
        pa.energy_efficiency_rating,
        pa.compliance_score,
        p.created_at,
        p.deadline
    FROM projects p
    LEFT JOIN clients c ON p.client_id = c.id
    LEFT JOIN project_analytics pa ON p.id = pa.project_id;
    
    -- View –¥–ª—è supplier —Ä–µ–π—Ç–∏–Ω–≥—É
    CREATE OR REPLACE VIEW supplier_rating_view AS
    SELECT 
        s.id,
        s.name,
        s.city,
        s.reliability_score,
        s.quality_score,
        s.delivery_score,
        s.price_competitiveness,
        s.ai_rating,
        COUNT(pq.id) as total_quotes,
        AVG(pq.quoted_price) as avg_quote_price,
        s.is_active
    FROM suppliers s
    LEFT JOIN price_quotes pq ON s.id = pq.supplier_id
    GROUP BY s.id;
    
    -- View –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª—ñ–≤ –∑ —Ü—ñ–Ω–∞–º–∏
    CREATE OR REPLACE VIEW material_price_view AS
    SELECT 
        m.id,
        m.name,
        m.category,
        m.base_price,
        m.currency,
        s.name as supplier_name,
        s.reliability_score as supplier_rating,
        m.availability_status,
        m.last_price_update
    FROM materials m
    LEFT JOIN suppliers s ON m.supplier_id = s.id
    WHERE m.base_price > 0;
    
    -- View –¥–ª—è –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
    CREATE OR REPLACE VIEW client_analytics_view AS
    SELECT 
        c.id,
        c.name,
        c.company_name,
        c.lead_score,
        c.lifecycle_stage,
        c.total_project_value,
        c.projects_count,
        COUNT(ci.id) as total_interactions,
        MAX(ci.occurred_at) as last_interaction_date,
        c.created_at
    FROM clients c
    LEFT JOIN client_interactions ci ON c.id = ci.client_id
    GROUP BY c.id;
    """
    
    try:
        engine = create_engine(DATABASE_URL)
        
        with engine.connect() as conn:
            conn.execute(text(views_sql))
            conn.commit()
        
        print("‚úÖ –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ views —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è views: {e}")
        return False

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –º—ñ–≥—Ä–∞—Ü—ñ—ó"""
    print("üè¢ VENTAI ENTERPRISE DATABASE MIGRATION")
    print("=" * 50)
    print(f"üïê –ß–∞—Å –ø–æ—á–∞—Ç–∫—É: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üîó Database: {DATABASE_URL.split('@')[1] if '@' in DATABASE_URL else 'localhost'}")
    
    success_steps = 0
    total_steps = 5
    
    # –ö—Ä–æ–∫–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó
    steps = [
        ("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è enterprise —Ç–∞–±–ª–∏—Ü—å", create_enterprise_tables),
        ("–í—Å—Ç–∞–≤–∫–∞ –∑—Ä–∞–∑–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö", insert_sample_data),
        ("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏—Ö views", create_enterprise_views),
        ("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –ë–î", verify_database),
    ]
    
    for step_name, step_func in steps:
        print(f"\nüîÑ {step_name}...")
        if await step_func():
            success_steps += 1
            print(f"‚úÖ {step_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        else:
            print(f"‚ùå {step_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏")
    
    # –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
    print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –ú–Ü–ì–†–ê–¶–Ü–á:")
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success_steps}/{len(steps)} –∫—Ä–æ–∫—ñ–≤")
    print(f"üïê –ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    if success_steps == len(steps):
        print(f"\nüéâ –ú–Ü–ì–†–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–Ü–®–ù–û!")
        print(f"üöÄ VentAI Enterprise Database –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ CHANGELOG
        update_changelog()
    else:
        print(f"\n‚ö†Ô∏è  –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏")
        print(f"üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —Ç–∞ –≤–∏–ø—Ä–∞–≤—Ç–µ –ø—Ä–æ–±–ª–µ–º–∏")

def update_changelog():
    """–û–Ω–æ–≤–ª—é—î CHANGELOG –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –º—ñ–≥—Ä–∞—Ü—ñ—ó"""
    try:
        changelog_path = Path(__file__).parent.parent / "CHANGELOG.md"
        
        if changelog_path.exists():
            content = changelog_path.read_text(encoding='utf-8')
            
            # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ 1.1
            new_entry = f"""
### ‚úÖ COMPLETED - {datetime.now().strftime('%Y-%m-%d %H:%M')}

#### üìä –ó–∞–≤–¥–∞–Ω–Ω—è 1.1: Database Schema –¥–ª—è Analytics - –ó–ê–í–ï–†–®–ï–ù–û
- [x] **1.1.1** –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∑ –∞–Ω–∞–ª—ñ—Ç–∏–∫–æ—é ‚úÖ
- [x] **1.1.2** –°—Ö–µ–º–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è AI –∞–Ω–∞–ª—ñ–∑—ñ–≤ ‚úÖ
- [x] **1.1.3** –¢–∞–±–ª–∏—Ü—ñ –¥–ª—è —Ü—ñ–Ω–æ–≤–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ ‚úÖ
- [x] **1.1.4** –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ —Ç–∞ KPI ‚úÖ

**–î–µ—Ç–∞–ª—ñ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó:**
- –°—Ç–≤–æ—Ä–µ–Ω–æ 9 –æ—Å–Ω–æ–≤–Ω–∏—Ö enterprise —Ç–∞–±–ª–∏—Ü—å
- –î–æ–¥–∞–Ω–æ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ views –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
- –Ü–º–ø–ª–µ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
- –ó—Ä–∞–∑–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏

---
"""
            
            # –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –ø—ñ—Å–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –§–ê–ó–ê 1
            phase1_index = content.find("## üéØ –§–ê–ó–ê 1: CORE ANALYTICS FOUNDATION")
            if phase1_index != -1:
                insert_point = content.find("\n", phase1_index + len("## üéØ –§–ê–ó–ê 1: CORE ANALYTICS FOUNDATION"))
                updated_content = content[:insert_point] + new_entry + content[insert_point:]
                
                changelog_path.write_text(updated_content, encoding='utf-8')
                print("üìù CHANGELOG –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ CHANGELOG: {e}")

if __name__ == "__main__":
    asyncio.run(main())
