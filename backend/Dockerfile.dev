# Development Dockerfile for backend
FROM python:3.10-slim

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    PYTHONPATH=/app

# Create a non-root user and group, ensure home directory is created with -m
RUN groupadd -g 1001 appgroup && useradd --no-log-init -r -m -g appgroup -u 1001 appuser

# Create virtual environment in a non-mounted path
RUN python3 -m venv /opt/venv
# Set PATH to use the new venv location
ENV PATH="/opt/venv/bin:$PATH"
# Ensure appuser owns the new venv
RUN chown -R appuser:appgroup /opt/venv

# Set working directory (code will be mounted here)
WORKDIR /app

# Create directories for MCP server with proper ownership (as root before switching user)
RUN mkdir -p /app/logs/mcp && chown -R appuser:appgroup /app

# Copy requirements first to leverage Docker cache (will be at /app/requirements.txt)
COPY --chown=appuser:appgroup requirements.txt /app/requirements.txt

# Switch to non-root user
USER appuser

# Install Python dependencies into the virtual environment (/opt/venv)
# using requirements.txt from /app/
RUN pip install --upgrade pip
RUN pip install -r /app/requirements.txt
# Explicitly install pandas and scikit-learn as a safeguard
RUN pip install pandas==2.2.2 scikit-learn==1.3.2

# Install additional MCP dependencies for development
RUN pip install asyncio-mqtt==0.16.1 websockets==12.0 aiofiles==24.1.0 httpx==0.25.2

# Application code will be mounted via docker-compose.dev.yml
# COPY --chown=appuser:appgroup . . # Not strictly needed if all code is volume mounted

# Expose port
EXPOSE 8000

# Healthcheck (optional for dev, can be useful)
# Using /docs as a simple check, adjust if you have a dedicated /health
HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
    CMD curl -f http://localhost:8000/docs || exit 1

# Default CMD is overridden by docker-compose.dev.yml, but good to have a fallback
# For dev, the command in docker-compose.dev.yml will include --reload
CMD ["python", "-m", "uvicorn", "src.fastapi_app.main:app", "--host", "0.0.0.0", "--port", "8000"]
