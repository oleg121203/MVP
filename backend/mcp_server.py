#!/usr/bin/env python3
"""
VentAI MCP Server –¥–ª—è Claude 4
–ó–∞–±–µ–∑–ø–µ—á—É—î –¥–æ—Å—Ç—É–ø –¥–æ AI —Å–µ—Ä–≤—ñ—Å—ñ–≤ VentAI —á–µ—Ä–µ–∑ Model Context Protocol
"""

import asyncio
import json
import logging
import os
import sys
from typing import Dict, List, Any, Optional
from pathlib import Path
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ FastAPI –¥–æ–¥–∞—Ç–∫—É
sys.path.insert(0, str(Path(__file__).parent / "src"))

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏
from mcp_ai_providers import AIProviderManager

try:
    from fastapi_app.ai.optimization_service import HVACOptimizer
    from fastapi_app.ai.cost_optimization_service import CostOptimizationService
    from fastapi_app.ai.project_analysis_service import ProjectAnalysisService
    from fastapi_app.ai.procurement_service import ProcurementService
    from fastapi_app.ai.vector_db_service import VectorDBService
    from fastapi_app.ai.crm_service import CRMService
except ImportError as e:
    print(f"Warning: Could not import AI services: {e}")
    print("Running in basic mode without AI capabilities")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class VentAIMCPServer:
    """MCP Server –¥–ª—è VentAI –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –≤—Å—ñ—Ö AI —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
    
    def __init__(self):
        self.project_root = os.getenv('VENTAI_PROJECT_ROOT', '/workspaces/MVP')
        self.port = int(os.getenv('MCP_PORT', '8001'))
        self.host = os.getenv('MCP_HOST', '0.0.0.0')
        self.ai_manager = AIProviderManager()
        self.initialize_services()

    async def initialize_ai_providers(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤"""
        logger.info("ü§ñ Initializing AI providers...")
        provider_results = await self.ai_manager.initialize_all()
        
        for provider, success in provider_results.items():
            status = "‚úÖ" if success else "‚ùå"
            logger.info(f"  {status} {provider}")
        
        available = self.ai_manager.get_available_providers()
        if available:
            logger.info(f"üöÄ Primary AI provider: {self.ai_manager.primary_provider}")
            logger.info(f"üìã Available providers: {', '.join(available)}")
        else:
            logger.warning("‚ö†Ô∏è  No AI providers available!")
        
        return provider_results

    def initialize_services(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è AI —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
        try:
            # Basic service initialization - –º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ
            self.hvac_optimizer = None  # HVACOptimizer()
            self.vector_db = None  # VectorDBService()
            self.cost_optimizer = None  # CostOptimizationService(self.vector_db)
            self.project_analyzer = None  # ProjectAnalysisService()
            self.procurement_service = None  # ProcurementService()
            self.crm_service = None  # CRMService()
            logger.info("‚úÖ Basic services initialized")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize services: {e}")

    async def get_capabilities(self) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        return {
            "tools": {
                "hvac_optimize": {
                    "description": "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è HVAC —Å–∏—Å—Ç–µ–º–∏",
                    "input_schema": {
                        "type": "object",
                        "properties": {
                            "area": {"type": "number", "description": "–ü–ª–æ—â–∞ –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è (–º¬≤)"},
                            "occupancy": {"type": "integer", "description": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π"},
                            "climate_zone": {"type": "string", "description": "–ö–ª—ñ–º–∞—Ç–∏—á–Ω–∞ –∑–æ–Ω–∞"},
                            "current_system": {"type": "string", "description": "–ü–æ—Ç–æ—á–Ω–∞ —Å–∏—Å—Ç–µ–º–∞"}
                        },
                        "required": ["area", "occupancy", "climate_zone"]
                    }
                },
                "project_analyze": {
                    "description": "–ê–Ω–∞–ª—ñ–∑ HVAC –ø—Ä–æ–µ–∫—Ç—É",
                    "input_schema": {
                        "type": "object",
                        "properties": {
                            "project_data": {"type": "object", "description": "–î–∞–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É"},
                            "check_compliance": {"type": "boolean", "description": "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –î–ë–ù"}
                        },
                        "required": ["project_data"]
                    }
                },
                "ai_generate": {
                    "description": "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —á–µ—Ä–µ–∑ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏",
                    "input_schema": {
                        "type": "object",
                        "properties": {
                            "prompt": {"type": "string", "description": "–ó–∞–ø–∏—Ç –¥–ª—è AI"},
                            "provider": {"type": "string", "description": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä (ollama/gemini/openai/anthropic)"},
                            "context": {"type": "object", "description": "–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"}
                        },
                        "required": ["prompt"]
                    }
                },
                "ai_hvac_analyze": {
                    "description": "AI –∞–Ω–∞–ª—ñ–∑ HVAC —Å–∏—Å—Ç–µ–º–∏",
                    "input_schema": {
                        "type": "object",
                        "properties": {
                            "hvac_data": {"type": "object", "description": "–î–∞–Ω—ñ HVAC —Å–∏—Å—Ç–µ–º–∏"},
                            "provider": {"type": "string", "description": "AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"},
                            "analysis_type": {"type": "string", "enum": ["basic", "detailed", "compliance"], "description": "–¢–∏–ø –∞–Ω–∞–ª—ñ–∑—É"}
                        },
                        "required": ["hvac_data"]
                    }
                },
                "ai_providers_status": {
                    "description": "–°—Ç–∞—Ç—É—Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤",
                    "input_schema": {
                        "type": "object",
                        "properties": {}
                    }
                }
            },
            "resources": {
                "workspace": {
                    "description": "VentAI workspace",
                    "uri": f"file://{self.project_root}"
                },
                "documentation": {
                    "description": "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –ø—Ä–æ–µ–∫—Ç—É",
                    "uri": f"file://{self.project_root}/docs"
                }
            }
        }

    async def execute_tool(self, tool_name: str, parameters: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É"""
        try:
            if tool_name == "hvac_optimize":
                return await self._hvac_optimize(parameters)
            elif tool_name == "project_analyze":
                return await self._project_analyze(parameters)
            elif tool_name == "ai_generate":
                return await self._ai_generate(parameters)
            elif tool_name == "ai_hvac_analyze":
                return await self._ai_hvac_analyze(parameters)
            elif tool_name == "ai_providers_status":
                return await self._ai_providers_status(parameters)
            else:
                return {"error": f"Unknown tool: {tool_name}"}
        except Exception as e:
            logger.error(f"Error executing tool {tool_name}: {e}")
            return {"error": str(e)}

    async def _hvac_optimize(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è HVAC —Å–∏—Å—Ç–µ–º–∏"""
        try:
            # –ë–∞–∑–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
            area = params["area"]
            occupancy = params["occupancy"]
            climate_zone = params.get("climate_zone", "temperate")
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–∑–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            air_change_rate = 6  # –ø–æ–≤—ñ—Ç—Ä–æ–æ–±–º—ñ–Ω –Ω–∞ –≥–æ–¥–∏–Ω—É
            required_airflow = area * air_change_rate * 2.5  # –º¬≥/–≥–æ–¥
            
            result = {
                "recommended_system": "–ü—Ä–∏–ø–ª–∏–≤–Ω–æ-–≤–∏—Ç—è–∂–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑ —Ä–µ–∫—É–ø–µ—Ä–∞—Ü—ñ—î—é",
                "required_airflow_m3h": required_airflow,
                "estimated_power_kw": required_airflow * 0.003,
                "estimated_cost_usd": area * 150,
                "energy_efficiency_class": "A",
                "annual_savings_percent": 25
            }
            
            return {
                "success": True,
                "optimization_result": result,
                "recommendations": [
                    f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: {result['recommended_system']}",
                    f"–ù–µ–æ–±—Ö—ñ–¥–Ω–∏–π –ø–æ–≤—ñ—Ç—Ä–æ–æ–±–º—ñ–Ω: {result['required_airflow_m3h']:.0f} –º¬≥/–≥–æ–¥",
                    f"–û—á—ñ–∫—É–≤–∞–Ω–∞ –µ–∫–æ–Ω–æ–º—ñ—è: {result['annual_savings_percent']}%"
                ]
            }
        except Exception as e:
            return {"error": f"HVAC optimization failed: {e}"}

    async def _project_analyze(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–µ–∫—Ç—É"""
        try:
            project_data = params["project_data"]
            check_compliance = params.get("check_compliance", True)
            
            result = {
                "project_status": "compliant",
                "compliance_score": 85,
                "energy_efficiency": "A",
                "estimated_payback_years": 5.2,
                "recommendations": [
                    "–†–æ–∑–≥–ª—è–Ω—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —Ä–µ–∫—É–ø–µ—Ä–∞—Ü—ñ—ó",
                    "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ–∑–æ–ª—è—Ü—ñ—é –ø–æ–≤—ñ—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥—ñ–≤"
                ]
            }
            
            return {
                "success": True,
                "analysis_result": result,
                "compliance_status": "compliant" if check_compliance else "not_checked"
            }
        except Exception as e:
            return {"error": f"Project analysis failed: {e}"}

    async def _ai_generate(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —á–µ—Ä–µ–∑ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏"""
        try:
            prompt = params["prompt"]
            provider = params.get("provider")
            context = params.get("context", {})
            
            # –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç VentAI
            ventai_context = {
                "system_info": "–¢–∏ AI –µ–∫—Å–ø–µ—Ä—Ç VentAI –¥–ª—è HVAC —Å–∏—Å—Ç–µ–º –≤ –£–∫—Ä–∞—ó–Ω—ñ. –ó–Ω–∞—î—à –î–ë–ù –í.2.5-67:2013, –µ–Ω–µ—Ä–≥–æ–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å, —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –±—É–¥—ñ–≤–µ–ª—å–Ω—ñ –Ω–æ—Ä–º–∏.",
                **context
            }
            
            if provider:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
                response = await self.ai_manager.generate_with_provider(provider, prompt, ventai_context)
                return {
                    "success": True,
                    "response": response,
                    "provider_used": provider
                }
            else:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback –ª–æ–≥—ñ–∫—É
                result = await self.ai_manager.generate_with_fallback(prompt, ventai_context)
                return result
                
        except Exception as e:
            logger.error(f"AI generation failed: {e}")
            return {"error": str(e)}

    async def _ai_hvac_analyze(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """AI –∞–Ω–∞–ª—ñ–∑ HVAC —Å–∏—Å—Ç–µ–º–∏"""
        try:
            hvac_data = params["hvac_data"]
            provider = params.get("provider")
            analysis_type = params.get("analysis_type", "basic")
            
            if provider:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
                result = await self.ai_manager.analyze_hvac_with_provider(provider, hvac_data)
                return {
                    "success": True,
                    "analysis": result,
                    "provider_used": provider,
                    "analysis_type": analysis_type
                }
            else:
                # –ü—Ä–æ–±—É—î–º–æ –∑ –∫–æ–∂–Ω–∏–º –¥–æ—Å—Ç—É–ø–Ω–∏–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
                available_providers = self.ai_manager.get_available_providers()
                
                if not available_providers:
                    return {"error": "No AI providers available"}
                
                primary_provider = available_providers[0]
                result = await self.ai_manager.analyze_hvac_with_provider(primary_provider, hvac_data)
                
                return {
                    "success": True,
                    "analysis": result,
                    "provider_used": primary_provider,
                    "analysis_type": analysis_type
                }
                
        except Exception as e:
            logger.error(f"AI HVAC analysis failed: {e}")
            return {"error": str(e)}

    async def _ai_providers_status(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """–°—Ç–∞—Ç—É—Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤"""
        try:
            available_providers = self.ai_manager.get_available_providers()
            all_providers = list(self.ai_manager.providers.keys())
            
            provider_details = {}
            for name, provider in self.ai_manager.providers.items():
                provider_details[name] = {
                    "available": provider.is_available,
                    "name": provider.name
                }
                
                # –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                if hasattr(provider, 'model'):
                    provider_details[name]["model"] = provider.model
                if hasattr(provider, 'base_url'):
                    provider_details[name]["base_url"] = provider.base_url
            
            return {
                "success": True,
                "status": {
                    "total_providers": len(all_providers),
                    "available_providers": len(available_providers),
                    "primary_provider": self.ai_manager.primary_provider,
                    "providers": provider_details
                },
                "recommendations": self._get_provider_recommendations(provider_details)
            }
            
        except Exception as e:
            logger.error(f"AI providers status check failed: {e}")
            return {"error": str(e)}

    def _get_provider_recommendations(self, provider_details: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤"""
        recommendations = []
        
        available_count = sum(1 for p in provider_details.values() if p["available"])
        
        if available_count == 0:
            recommendations.append("‚ùå –ñ–æ–¥–µ–Ω AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ API –∫–ª—é—á—ñ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
        elif available_count == 1:
            recommendations.append("‚ö†Ô∏è  –î–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –æ–¥–∏–Ω AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä. –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏.")
        else:
            recommendations.append(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ {available_count} AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤. –°–∏—Å—Ç–µ–º–∞ –º–∞—î –≥–∞—Ä–Ω—É –≤—ñ–¥–º–æ–≤–æ—Å—Ç—ñ–π–∫—ñ—Å—Ç—å.")
        
        # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        if not provider_details.get("ollama", {}).get("available"):
            recommendations.append("üí° Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Ollama —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –º–æ–¥–µ–ª—å.")
        
        if not provider_details.get("openai", {}).get("available"):
            recommendations.append("üí° OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –î–æ–¥–∞–π—Ç–µ OPENAI_API_KEY –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ GPT –º–æ–¥–µ–ª–µ–π.")
        
        if not provider_details.get("anthropic", {}).get("available"):
            recommendations.append("üí° Anthropic –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –î–æ–¥–∞–π—Ç–µ ANTHROPIC_API_KEY –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ Claude.")
        
        if not provider_details.get("gemini", {}).get("available"):
            recommendations.append("üí° Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –î–æ–¥–∞–π—Ç–µ GEMINI_API_KEY –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ Google AI.")
        
        return recommendations


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    server = VentAIMCPServer()
    
    # –í–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä
    print("üöÄ VentAI MCP Server for Claude 4")
    print(f"üìÅ Project root: {server.project_root}")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤
    print("\nü§ñ Initializing AI providers...")
    await server.initialize_ai_providers()
    
    capabilities = await server.get_capabilities()
    print(f"üõ†  Available tools: {len(capabilities['tools'])}")
    print(f"üìö Available resources: {len(capabilities['resources'])}")
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    print("\nüß™ Testing functionality...")
    
    # –¢–µ—Å—Ç AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤
    ai_status = await server.execute_tool("ai_providers_status", {})
    if ai_status.get("success"):
        status_info = ai_status["status"]
        print(f"‚úÖ AI Providers: {status_info['available_providers']}/{status_info['total_providers']} available")
        if status_info['primary_provider']:
            print(f"üéØ Primary provider: {status_info['primary_provider']}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        for rec in ai_status.get("recommendations", []):
            print(f"  {rec}")
    
    # –¢–µ—Å—Ç AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
    if ai_status.get("success") and ai_status["status"]["available_providers"] > 0:
        print("\nüß™ Testing AI generation...")
        ai_test = await server.execute_tool("ai_generate", {
            "prompt": "–ü—Ä–∏–≤—ñ—Ç! –û–ø–∏—à–∏ —Å–µ–±–µ —è–∫ VentAI –µ–∫—Å–ø–µ—Ä—Ç.",
            "context": {"test": True}
        })
        if ai_test.get("success"):
            print(f"‚úÖ AI Generation test passed with {ai_test.get('provider_used', 'unknown')}")
            print(f"  Response preview: {ai_test['response'][:100]}...")
        else:
            print(f"‚ùå AI Generation test failed: {ai_test.get('error')}")
    
    # –¢–µ—Å—Ç HVAC –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    test_params = {
        "area": 100,
        "occupancy": 10,
        "climate_zone": "temperate",
        "current_system": "split"
    }
    
    result = await server.execute_tool("hvac_optimize", test_params)
    if result.get("success"):
        print("‚úÖ HVAC optimization test passed")
    else:
        print(f"‚ùå HVAC optimization test failed: {result.get('error')}")
    
    # –¢–µ—Å—Ç AI HVAC –∞–Ω–∞–ª—ñ–∑—É
    if ai_status.get("success") and ai_status["status"]["available_providers"] > 0:
        print("\nüß™ Testing AI HVAC analysis...")
        hvac_test = await server.execute_tool("ai_hvac_analyze", {
            "hvac_data": test_params,
            "analysis_type": "basic"
        })
        if hvac_test.get("success"):
            print("‚úÖ AI HVAC analysis test passed")
        else:
            print(f"‚ùå AI HVAC analysis test failed: {hvac_test.get('error')}")
    
    print("\nüéØ VentAI MCP Server ready for Claude 4!")
    print("üí° You can now use Claude to interact with VentAI services")
    print("\nüìã Available AI providers:")
    available_providers = server.ai_manager.get_available_providers()
    if available_providers:
        for provider in available_providers:
            print(f"  ‚úÖ {provider}")
    else:
        print("  ‚ùå No AI providers available")
    
    print("\nüîß Quick start commands for Claude:")
    print("  - '–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π HVAC —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ—Ñ—ñ—Å—É 100–º¬≤'")
    print("  - '–û–ø—Ç–∏–º—ñ–∑—É–π –≤–µ–Ω—Ç–∏–ª—è—Ü—ñ—é –¥–ª—è 50 –ª—é–¥–µ–π'")
    print("  - '–ü–µ—Ä–µ–≤—ñ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç—É –î–ë–ù'")
    print("  - '–ó–Ω–∞–π–¥–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É'")
    
    # –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health checks
    class HealthHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/health':
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                health_status = {
                    "status": "healthy",
                    "mcp_server": "running",
                    "ai_providers": server.ai_manager.get_available_providers(),
                    "capabilities": len(capabilities['tools']),
                    "timestamp": asyncio.get_event_loop().time()
                }
                self.wfile.write(json.dumps(health_status, indent=2).encode())
            else:
                self.send_response(404)
                self.end_headers()
    
    # –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    def start_http_server():
        httpd = HTTPServer((server.host, server.port), HealthHandler)
        print(f"\nüåê Health check server running on http://{server.host}:{server.port}/health")
        httpd.serve_forever()
    
    http_thread = threading.Thread(target=start_http_server, daemon=True)
    http_thread.start()
    
    print("\n‚úÖ VentAI MCP Server is ready! Press Ctrl+C to stop.")
    
    try:
        # –¢—Ä–∏–º–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä –∂–∏–≤–∏–º
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        print("\nüëã Shutting down VentAI MCP Server...")


if __name__ == "__main__":
    asyncio.run(main())