#!/bin/zsh

# Windsurf Task Decomposition Monitor
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–∫—Ç–∏–≤—É—î —Ä–æ–∑–±–∏—Ç—Ç—è –∑–∞–≤–¥–∞–Ω—å —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å

WINDSURF_DIR="/Users/olegkizyma/workspaces/MVP/ventai-app/.windsurf"
PROGRESS_DIR="$WINDSURF_DIR/progress"
RULES_DIR="$WINDSURF_DIR/rules"

# –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
mkdir -p "$PROGRESS_DIR"
mkdir -p "$RULES_DIR"
mkdir -p "$WINDSURF_DIR/activation"
mkdir -p "$WINDSURF_DIR/status"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –≤–µ–ª–∏–∫–∏—Ö –∑–∞–≤–¥–∞–Ω—å
detect_large_task() {
    local task_input="$1"
    
    # –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –≤–µ–ª–∏–∫–∏—Ö –∑–∞–≤–¥–∞–Ω—å
    large_task_keywords=(
        "create complete"
        "full setup"
        "entire system"
        "all tests"
        "comprehensive"
        "implement complete"
        "setup all"
        "create entire"
        "build full"
        "develop complete"
    )
    
    for keyword in "${large_task_keywords[@]}"; do
        if [[ "$task_input" == *"$keyword"* ]]; then
            return 0  # –í–µ–ª–∏–∫–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏—è–≤–ª–µ–Ω–æ
        fi
    done
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    component_count=$(echo "$task_input" | grep -o -E "(test|component|page|service|api|database|frontend|backend)" | wc -l)
    if [[ $component_count -gt 3 ]]; then
        return 0  # –í–µ–ª–∏–∫–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏—è–≤–ª–µ–Ω–æ
    fi
    
    return 1  # –ó–≤–∏—á–∞–π–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É —Ä–æ–∑–±–∏—Ç—Ç—è
create_decomposition_template() {
    local original_task="$1"
    local decomposition_file="$PROGRESS_DIR/current_decomposition.json"
    
    cat > "$decomposition_file" << EOF
{
  "originalTask": "$original_task",
  "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "status": "active",
  "currentPhase": 1,
  "phases": [
    {
      "id": 1,
      "description": "Phase 1: Initial setup and configuration",
      "status": "pending",
      "estimatedTokens": 200
    },
    {
      "id": 2,
      "description": "Phase 2: Core implementation",
      "status": "pending",
      "estimatedTokens": 300
    },
    {
      "id": 3,
      "description": "Phase 3: Testing and validation",
      "status": "pending",
      "estimatedTokens": 250
    },
    {
      "id": 4,
      "description": "Phase 4: Integration and optimization",
      "status": "pending",
      "estimatedTokens": 200
    },
    {
      "id": 5,
      "description": "Phase 5: Documentation and cleanup",
      "status": "pending",
      "estimatedTokens": 150
    }
  ],
  "autoProgress": true,
  "totalEstimatedTokens": 1100
}
EOF

    echo "Decomposition template created: $decomposition_file"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
activate_auto_mode() {
    local activation_file="$WINDSURF_DIR/activation/auto_decompose.active"
    
    cat > "$activation_file" << EOF
# Auto-Decomposition Activated
TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
STATUS=ACTIVE
MODE=AUTO_DECOMPOSE
PRIORITY=MAXIMUM

# Commands
DECOMPOSE_LARGE_TASKS=true
AUTO_PROGRESS=true
PAUSE_OVERRIDE=true
CONTINUE_KILLER=true

# Rules Active
- task_decomposition_auto.md
- continue_response_killer.md
- cascade_error_override.md
- auto_context_loader.md
EOF

    echo "Auto-decomposition mode ACTIVATED"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Å—Ç–∞—Ç—É—Å—É
monitor_status() {
    local status_file="$WINDSURF_DIR/status/decomposition_monitor.log"
    
    echo "[$(date)] Monitoring decomposition status..." >> "$status_file"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –∞–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑–±–∏—Ç—Ç—è
    if [[ -f "$PROGRESS_DIR/current_decomposition.json" ]]; then
        local current_phase=$(jq -r '.currentPhase' "$PROGRESS_DIR/current_decomposition.json" 2>/dev/null || echo "unknown")
        local total_phases=$(jq -r '.phases | length' "$PROGRESS_DIR/current_decomposition.json" 2>/dev/null || echo "unknown")
        
        echo "[$(date)] Active decomposition: Phase $current_phase of $total_phases" >> "$status_file"
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–≤–∏–¥–∫–∏—Ö –∫–æ–º–∞–Ω–¥
create_quick_commands() {
    local commands_file="$WINDSURF_DIR/activation/quick_commands.sh"
    
    cat > "$commands_file" << 'EOF'
#!/bin/zsh

# –®–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–æ–∑–±–∏—Ç—Ç—è–º –∑–∞–≤–¥–∞–Ω—å

# –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–±–∏—Ç—Ç—è
alias windsurf-auto='echo "WINDSURF ACTIVATE: Load all rules, auto-decompose large tasks, continue automatically"'

# –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
alias windsurf-status='cat ~/.windsurf/progress/current_decomposition.json 2>/dev/null | jq . || echo "No active decomposition"'

# –§–æ—Ä—Å—É–≤–∞—Ç–∏ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
alias windsurf-force='echo "CRITICAL OVERRIDE: Activate maximum priority never-stop protocol. Continue automatically."'

# –†–æ–∑–±–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—Ä—É—á–Ω—É
windsurf-decompose() {
    echo "DECOMPOSE: $1"
}

# –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Ñ–∞–∑–∏
alias windsurf-next='echo "PHASE_NEXT: Continue to next decomposition phase automatically"'

# –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Ñ–∞–∑—É
alias windsurf-retry='echo "PHASE_RESTART: Retry current phase with enhanced context"'

EOF

    chmod +x "$commands_file"
    echo "Quick commands created: $commands_file"
}

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
main() {
    echo "üöÄ Windsurf Task Decomposition System Setup"
    echo "=========================================="
    
    # –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–µ–∂–∏–º
    activate_auto_mode
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ —à–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏
    create_quick_commands
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
    monitor_status
    
    echo ""
    echo "‚úÖ Setup completed!"
    echo ""
    echo "Available commands:"
    echo "  windsurf-auto    - Activate auto-decomposition"
    echo "  windsurf-status  - Check current status"
    echo "  windsurf-force   - Force continue override"
    echo "  windsurf-next    - Go to next phase"
    echo "  windsurf-retry   - Retry current phase"
    echo ""
    echo "To use: source $WINDSURF_DIR/activation/quick_commands.sh"
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    echo ""
    echo "Example usage:"
    echo '  windsurf-decompose "Create complete testing framework for VentAI app"'
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–∏
case "${1:-setup}" in
    "setup")
        main
        ;;
    "detect")
        if detect_large_task "$2"; then
            echo "Large task detected: $2"
            create_decomposition_template "$2"
        else
            echo "Regular task: $2"
        fi
        ;;
    "monitor")
        monitor_status
        ;;
    "activate")
        activate_auto_mode
        ;;
    *)
        echo "Usage: $0 {setup|detect|monitor|activate}"
        exit 1
        ;;
esac
