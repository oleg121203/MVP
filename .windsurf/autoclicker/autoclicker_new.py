#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –¥–ª—è —á–∞—Ç—É Windsurf
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫–∏ Accept All —Ç–∞ Continue –∫–æ–ª–∏ AI –∑–∞–≤–µ—Ä—à—É—î –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é
"""

import pyautogui
import time
import os
import sys
import hashlib
from datetime import datetime

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---

# –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
IMAGE_DIR = os.path.join(BASE_DIR, 'images')
ACCEPT_ALL_BUTTON = os.path.join(IMAGE_DIR, 'accept_all.png')
CONTINUE_BUTTON = os.path.join(IMAGE_DIR, 'continue.png')
STOP_FLAG_FILE = os.path.join(BASE_DIR, 'stop.flag')

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
CONFIDENCE = 0.6

# –Ü–Ω—Ç–µ—Ä–≤–∞–ª–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
SCAN_INTERVAL = 10           # –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥
PAUSE_AFTER_CLICK = 60       # –ü–∞—É–∑–∞ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
CLICK_DELAY = 3              # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ Accept All —Ç–∞ Continue
SCROLL_AMOUNT = 15           # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∫—Ä–æ–ª—ñ–≤ –¥–æ –Ω–∏–∑—É

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±–ª–∞—Å—Ç—ñ –ø–æ—à—É–∫—É
BOTTOM_AREA_PERCENTAGE = 0.15  # –®—É–∫–∞—î–º–æ –≤ –Ω–∏–∂–Ω—ñ—Ö 15% —á–∞—Ç—É

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
last_clicked_buttons = set()   # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ö–µ—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–∞–∂–∞—Ç–∏—Ö –∫–Ω–æ–ø–æ–∫
scan_counter = 0

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---

def log_message(message, level="INFO"):
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é."""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {level}: {message}")

def check_stop_signal():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏."""
    if os.path.exists(STOP_FLAG_FILE):
        log_message("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª 'stop.flag'", "WARN")
        try:
            os.remove(STOP_FLAG_FILE)
            log_message("–§–∞–π–ª 'stop.flag' –≤–∏–¥–∞–ª–µ–Ω–æ")
        except OSError as e:
            log_message(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ 'stop.flag': {e}", "ERROR")
        return True
    return False

def get_chat_area():
    """–í–∏–∑–Ω–∞—á–∞—î –æ–±–ª–∞—Å—Ç—å —á–∞—Ç—É Windsurf."""
    try:
        screen_width, screen_height = pyautogui.size()
        
        # –ß–∞—Ç Windsurf –∑–∞–∑–≤–∏—á–∞–π –≤ –ø—Ä–∞–≤—ñ–π —á–∞—Å—Ç–∏–Ω—ñ
        chat_area = {
            'left': int(screen_width * 0.5),
            'top': int(screen_height * 0.1),
            'width': int(screen_width * 0.5),
            'height': int(screen_height * 0.8)
        }
        
        log_message(f"–û–±–ª–∞—Å—Ç—å —á–∞—Ç—É: {chat_area['left']},{chat_area['top']} {chat_area['width']}x{chat_area['height']}")
        return chat_area
    except Exception as e:
        log_message(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ–±–ª–∞—Å—Ç—ñ —á–∞—Ç—É: {e}", "ERROR")
        return None

def scroll_to_bottom(chat_area):
    """–ü—Ä–æ–∫—Ä—É—á—É—î —á–∞—Ç –¥–æ —Å–∞–º–æ–≥–æ –Ω–∏–∑—É."""
    try:
        # –ü–æ–∑–∏—Ü—ñ–æ–Ω—É—î–º–æ—Å—å –≤ —Ü–µ–Ω—Ç—Ä—ñ —á–∞—Ç—É
        center_x = chat_area['left'] + chat_area['width'] // 2
        center_y = chat_area['top'] + chat_area['height'] // 2
        
        pyautogui.moveTo(center_x, center_y)
        
        # –ê–≥—Ä–µ—Å–∏–≤–Ω–µ –ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è –¥–æ –Ω–∏–∑—É
        for _ in range(SCROLL_AMOUNT):
            pyautogui.scroll(-10)  # –í–µ–ª–∏–∫—ñ —Å–∫—Ä–æ–ª—ñ –≤–Ω–∏–∑
            time.sleep(0.05)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à–∞–º–∏
        pyautogui.press('end')  # –î–æ –∫—ñ–Ω—Ü—è
        time.sleep(0.2)
        
        log_message("–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –Ω–∏–∑—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        log_message(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: {e}", "ERROR")

def get_button_hash(button_type, location):
    """–°—Ç–≤–æ—Ä—é—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —Ö–µ—à –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∏–ø—É —Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç."""
    location_str = f"{button_type}_{location.left}_{location.top}_{location.width}_{location.height}"
    return hashlib.md5(location_str.encode()).hexdigest()

def scan_for_new_buttons(chat_area):
    """–®—É–∫–∞—î –Ω–æ–≤—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏ –≤ —Å–∞–º–æ–º—É –Ω–∏–∑—É —á–∞—Ç—É."""
    global scan_counter
    scan_counter += 1
    
    try:
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –æ–±–ª–∞—Å—Ç—å —Å–∞–º–æ–≥–æ –Ω–∏–∑—É
        bottom_height = int(chat_area['height'] * BOTTOM_AREA_PERCENTAGE)
        bottom_top = chat_area['top'] + chat_area['height'] - bottom_height
        search_region = (chat_area['left'], bottom_top, chat_area['width'], bottom_height)
        
        log_message(f"–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è #{scan_counter}: –æ–±–ª–∞—Å—Ç—å {search_region}")
        
        new_buttons = []
        
        # –®—É–∫–∞—î–º–æ Accept All
        try:
            accept_locations = list(pyautogui.locateAllOnScreen(
                ACCEPT_ALL_BUTTON, 
                confidence=CONFIDENCE, 
                region=search_region
            ))
            
            for location in accept_locations:
                button_hash = get_button_hash('accept_all', location)
                if button_hash not in last_clicked_buttons:
                    new_buttons.append(('accept_all', location, button_hash))
                    log_message(f"–ù–æ–≤–∞ –∫–Ω–æ–ø–∫–∞ Accept All: {location}")
                
        except pyautogui.ImageNotFoundException:
            pass
        
        # –®—É–∫–∞—î–º–æ Continue
        try:
            continue_locations = list(pyautogui.locateAllOnScreen(
                CONTINUE_BUTTON, 
                confidence=CONFIDENCE, 
                region=search_region
            ))
            
            for location in continue_locations:
                button_hash = get_button_hash('continue', location)
                if button_hash not in last_clicked_buttons:
                    new_buttons.append(('continue', location, button_hash))
                    log_message(f"–ù–æ–≤–∞ –∫–Ω–æ–ø–∫–∞ Continue: {location}")
                
        except pyautogui.ImageNotFoundException:
            pass
        
        return new_buttons
        
    except Exception as e:
        log_message(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫: {e}", "ERROR")
        return []

def click_button(button_type, location, button_hash):
    """–ù–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É —Ç–∞ –∑–∞–ø–∞–º'—è—Ç–æ–≤—É—î —ó—ó."""
    try:
        center = pyautogui.center(location)
        pyautogui.moveTo(center)
        time.sleep(0.3)
        pyautogui.click()
        
        # –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ, —â–æ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ —Ü—é –∫–Ω–æ–ø–∫—É
        last_clicked_buttons.add(button_hash)
        
        log_message(f"–ù–∞—Ç–∏—Å–Ω—É—Ç–æ {button_type} –≤ –ø–æ–∑–∏—Ü—ñ—ó {center}")
        return True
        
    except Exception as e:
        log_message(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è {button_type}: {e}", "ERROR")
        return False

def execute_button_sequence(new_buttons):
    """–í–∏–∫–æ–Ω—É—î –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫."""
    # –†–æ–∑–¥—ñ–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–æ —Ç–∏–ø–∞—Ö
    accept_buttons = [(btn[1], btn[2]) for btn in new_buttons if btn[0] == 'accept_all']
    continue_buttons = [(btn[1], btn[2]) for btn in new_buttons if btn[0] == 'continue']
    
    if not continue_buttons:
        log_message("–ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –∫–Ω–æ–ø–æ–∫ Continue - —á–µ–∫–∞—î–º–æ")
        return False
    
    if not accept_buttons:
        log_message("–ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –∫–Ω–æ–ø–æ–∫ Accept All - —á–µ–∫–∞—î–º–æ")
        return False
    
    log_message("üéØ –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ñ –∫–Ω–æ–ø–∫–∏! –ü–æ—á–∏–Ω–∞—é –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å...")
    
    # 1. –ù–∞—Ç–∏—Å–∫–∞—î–º–æ Accept All
    log_message("1Ô∏è‚É£ –ù–∞—Ç–∏—Å–∫–∞—é Accept All...")
    for location, button_hash in accept_buttons:
        if click_button('Accept All', location, button_hash):
            time.sleep(0.5)  # –ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –∫–Ω–æ–ø–∫–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø—É
    
    # 2. –ß–µ–∫–∞—î–º–æ
    log_message(f"‚è≥ –ß–µ–∫–∞—é {CLICK_DELAY} —Å–µ–∫—É–Ω–¥...")
    time.sleep(CLICK_DELAY)
    
    # 3. –ù–∞—Ç–∏—Å–∫–∞—î–º–æ Continue
    log_message("2Ô∏è‚É£ –ù–∞—Ç–∏—Å–∫–∞—é Continue...")
    for location, button_hash in continue_buttons:
        if click_button('Continue', location, button_hash):
            time.sleep(0.5)
    
    log_message(f"‚úÖ –ü–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–∞—É–∑–∞ {PAUSE_AFTER_CLICK} —Å–µ–∫—É–Ω–¥")
    return True

def cleanup_old_button_history():
    """–û—á–∏—â–∞—î —ñ—Å—Ç–æ—Ä—ñ—é —Å—Ç–∞—Ä–∏—Ö –∫–Ω–æ–ø–æ–∫, —â–æ–± –Ω–µ –ø–µ—Ä–µ–ø–æ–≤–Ω—é–≤–∞—Ç–∏ –ø–∞–º'—è—Ç—å."""
    global last_clicked_buttons
    
    # –ö–æ–∂–Ω—ñ 50 —Å–∫–∞–Ω—É–≤–∞–Ω—å –æ—á–∏—â–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é (–∑–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 20 –∑–∞–ø–∏—Å—ñ–≤)
    if scan_counter % 50 == 0 and len(last_clicked_buttons) > 20:
        old_buttons = list(last_clicked_buttons)
        last_clicked_buttons = set(old_buttons[-20:])  # –ó–∞–ª–∏—à–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 20
        log_message(f"–û—á–∏—â–µ–Ω–æ —ñ—Å—Ç–æ—Ä—ñ—é –∫–Ω–æ–ø–æ–∫: –∑–∞–ª–∏—à–µ–Ω–æ {len(last_clicked_buttons)} –∑–∞–ø–∏—Å—ñ–≤")

# --- –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---

def main():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞."""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –∑–æ–±—Ä–∞–∂–µ–Ω—å
    if not os.path.exists(ACCEPT_ALL_BUTTON):
        log_message(f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {ACCEPT_ALL_BUTTON}", "ERROR")
        return 1
        
    if not os.path.exists(CONTINUE_BUTTON):
        log_message(f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {CONTINUE_BUTTON}", "ERROR")
        return 1
    
    log_message(f"‚úÖ –§–∞–π–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑–Ω–∞–π–¥–µ–Ω–æ")
    log_message(f"   - {ACCEPT_ALL_BUTTON}")
    log_message(f"   - {CONTINUE_BUTTON}")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±–ª–∞—Å—Ç—å —á–∞—Ç—É
    chat_area = get_chat_area()
    if not chat_area:
        log_message("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –æ–±–ª–∞—Å—Ç—å —á–∞—Ç—É", "ERROR")
        return 1
    
    log_message("üöÄ –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä Windsurf –∑–∞–ø—É—â–µ–Ω–æ!")
    log_message(f"üí° –î–ª—è –∑—É–ø–∏–Ω–∫–∏ —Å—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª 'stop.flag' –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
    log_message(f"üìç –û–±–ª–∞—Å—Ç—å –ø–æ—à—É–∫—É: {chat_area['width']}x{chat_area['height']} –ø—ñ–∫—Å–µ–ª—ñ–≤")
    log_message(f"üîÑ –õ–æ–≥—ñ–∫–∞: –ß–µ–∫–∞—é –Ω–æ–≤—ñ Continue + Accept All ‚Üí –Ω–∞—Ç–∏—Å–∫–∞—é ‚Üí –ø–∞—É–∑–∞ {PAUSE_AFTER_CLICK}—Å")
    log_message(f"‚è±Ô∏è –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω—ñ {SCAN_INTERVAL} —Å–µ–∫—É–Ω–¥")
    
    try:
        while True:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏
            if check_stop_signal():
                break
            
            # –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –¥–æ –Ω–∏–∑—É
            scroll_to_bottom(chat_area)
            
            # –®—É–∫–∞—î–º–æ –Ω–æ–≤—ñ –∫–Ω–æ–ø–∫–∏
            new_buttons = scan_for_new_buttons(chat_area)
            
            if new_buttons:
                # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
                if execute_button_sequence(new_buttons):
                    # –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è —á–µ–∫–∞—î–º–æ –¥–æ–≤—à–µ
                    time.sleep(PAUSE_AFTER_CLICK)
                else:
                    # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏, —á–µ–∫–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
                    time.sleep(SCAN_INTERVAL)
            else:
                # –ù–æ–≤–∏—Ö –∫–Ω–æ–ø–æ–∫ –Ω–µ–º–∞—î, —á–µ–∫–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
                if scan_counter % 5 == 0:
                    log_message(f"‚è≥ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è #{scan_counter}: –Ω–æ–≤–∏—Ö –∫–Ω–æ–ø–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                time.sleep(SCAN_INTERVAL)
            
            # –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –æ—á–∏—â–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
            cleanup_old_button_history()
                
    except KeyboardInterrupt:
        log_message("–ó—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (Ctrl+C)", "WARN")
        return 0
    except Exception as e:
        log_message(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", "ERROR")
        import traceback
        log_message(f"–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {traceback.format_exc()}", "ERROR")
        return 1
    
    log_message("–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É")
    return 0

if __name__ == "__main__":
    sys.exit(main())
