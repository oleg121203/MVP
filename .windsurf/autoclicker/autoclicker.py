#!/usr/bin/env python3
"""
Windsurf Chat Autoclicker - HANDS-FREE MODE
–ë–ï–ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏, –ë–ï–ó –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –º–∏—à—ñ, —Ç—ñ–ª—å–∫–∏ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ —à–≤–∏–¥–∫—ñ –∫–ª—ñ–∫–∏
"""

import os
import sys
import time
import signal
import pyautogui
from pathlib import Path

# ===== HANDS-FREE –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =====
CONFIDENCE = 0.7
NORMAL_PAUSE = 10
AFTER_CLICK_PAUSE = 60
SEQUENCE_PAUSE = 3
VERBOSE_LOGGING = True

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
last_button_coordinates = {}
script_running = True

# –®–ª—è—Ö–∏ –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å
script_dir = Path(__file__).parent
images_dir = script_dir / "images"
ACCEPT_ALL_BUTTON = str(images_dir / "accept_all.png")
CONTINUE_BUTTON = str(images_dir / "continue.png")

def signal_handler(signum, frame):
    global script_running
    print("\nüõë Hands-Free —Å–∫—Ä–∏–ø—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")
    script_running = False
    sys.exit(0)

def check_stop_flag():
    stop_flag_path = script_dir / "stop.flag"
    if stop_flag_path.exists():
        print("üõë –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª 'stop.flag'. –ó—É–ø–∏–Ω—è—é —Å–∫—Ä–∏–ø—Ç...")
        stop_flag_path.unlink()
        return True
    return False

def validate_image_files():
    missing_files = []
    if not os.path.exists(ACCEPT_ALL_BUTTON):
        missing_files.append(ACCEPT_ALL_BUTTON)
    if not os.path.exists(CONTINUE_BUTTON):
        missing_files.append(CONTINUE_BUTTON)
    
    if missing_files:
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å:")
        for file in missing_files:
            print(f"   - {file}")
        return False
    
    print("‚úÖ –§–∞–π–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑–Ω–∞–π–¥–µ–Ω–æ:")
    print(f"   - {ACCEPT_ALL_BUTTON}")
    print(f"   - {CONTINUE_BUTTON}")
    return True

def find_buttons_hands_free():
    """–®—É–∫–∞—î –∫–Ω–æ–ø–∫–∏ –ë–ï–ó –±—É–¥—å-—è–∫–æ—ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∞–±–æ —Ä—É—Ö—ñ–≤ –º–∏—à—ñ."""
    buttons_found = {}
    
    try:
        if VERBOSE_LOGGING:
            print("üîç Hands-Free –ø–æ—à—É–∫ (–ë–ï–ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏)...")
        
        # –®—É–∫–∞—î–º–æ Continue –ø–æ –≤—Å—å–æ–º—É –µ–∫—Ä–∞–Ω—É
        try:
            continue_location = pyautogui.locateOnScreen(CONTINUE_BUTTON, confidence=CONFIDENCE)
            if continue_location:
                continue_center = pyautogui.center(continue_location)
                buttons_found['continue'] = {
                    'location': continue_location,
                    'center': continue_center
                }
                print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ 'Continue': {continue_location}")
        except pyautogui.ImageNotFoundException:
            pass
        
        # –®—É–∫–∞—î–º–æ Accept All –ø–æ –≤—Å—å–æ–º—É –µ–∫—Ä–∞–Ω—É
        try:
            accept_location = pyautogui.locateOnScreen(ACCEPT_ALL_BUTTON, confidence=CONFIDENCE)
            if accept_location:
                accept_center = pyautogui.center(accept_location)
                buttons_found['accept_all'] = {
                    'location': accept_location,
                    'center': accept_center
                }
                print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ 'Accept all': {accept_location}")
        except pyautogui.ImageNotFoundException:
            pass
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É: {e}")
    
    return buttons_found

def are_buttons_new(buttons):
    global last_button_coordinates
    
    for button_type, button_data in buttons.items():
        location = button_data['location']
        key = f"{button_type}_{location.left}_{location.top}"
        
        if key in last_button_coordinates:
            if VERBOSE_LOGGING:
                print(f"‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ {button_type} –≤ —Å—Ç–∞—Ä–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö")
            return False
    
    print("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ñ –∫–Ω–æ–ø–∫–∏!")
    return True

def update_button_coordinates(buttons):
    global last_button_coordinates
    
    for button_type, button_data in buttons.items():
        location = button_data['location']
        key = f"{button_type}_{location.left}_{location.top}"
        last_button_coordinates[key] = time.time()

def click_button_hands_free(button_data, button_name):
    """–®–≤–∏–¥–∫–∏–π –∫–ª—ñ–∫ –ë–ï–ó –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –º–∏—à—ñ."""
    try:
        center = button_data['center']
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–æ–∑–∏—Ü—ñ—é –º–∏—à—ñ
        original_pos = pyautogui.position()
        
        # –®–≤–∏–¥–∫–∏–π –∫–ª—ñ–∫
        pyautogui.click(center.x, center.y, duration=0.05)
        print(f"‚ö° Hands-Free –∫–ª—ñ–∫: '{button_name}' –≤ {center}")
        
        # –ù–ï –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–∏—à—É –¥–ª—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –≤—Ç—Ä—É—á–∞–Ω–Ω—è
        
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–ª—ñ–∫—É {button_name}: {e}")
        return False

def execute_hands_free_sequence(buttons):
    """–í–∏–∫–æ–Ω—É—î —à–≤–∏–¥–∫—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –ë–ï–ó –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –º–∏—à—ñ."""
    print("\n‚ö° HANDS-FREE: –®–≤–∏–¥–∫–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å...\n")
    
    # 1. Accept All
    print("1Ô∏è‚É£ –®–≤–∏–¥–∫–∏–π –∫–ª—ñ–∫ Accept All...")
    if not click_button_hands_free(buttons['accept_all'], 'Accept All'):
        return False
    
    # 2. –ü–∞—É–∑–∞
    print(f"‚è≥ –ü–∞—É–∑–∞ {SEQUENCE_PAUSE}—Å...")
    time.sleep(SEQUENCE_PAUSE)
    
    # 3. Continue
    print("2Ô∏è‚É£ –®–≤–∏–¥–∫–∏–π –∫–ª—ñ–∫ Continue...")
    if not click_button_hands_free(buttons['continue'], 'Continue'):
        return False
    
    # 4. –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
    update_button_coordinates(buttons)
    
    print("‚úÖ Hands-Free –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n")
    return True

def main_hands_free_loop():
    """–û—Å–Ω–æ–≤–Ω–∏–π Hands-Free —Ü–∏–∫–ª –ë–ï–ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏."""
    global script_running
    
    print("üöÄ HANDS-FREE MODE –∑–∞–ø—É—â–µ–Ω–æ!")
    print("üñ±Ô∏è –ú–∏—à–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –í–Ü–õ–¨–ù–û–Æ")
    print("üìú –ë–ï–ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏")
    print("‚ö° –¢—ñ–ª—å–∫–∏ —à–≤–∏–¥–∫—ñ –∫–ª—ñ–∫–∏")
    print("üí° –î–ª—è –∑—É–ø–∏–Ω–∫–∏: Ctrl+C –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å stop.flag\n")
    
    cycle = 0
    
    while script_running:
        try:
            cycle += 1
            
            if check_stop_flag():
                break
            
            print(f"üîç –¶–∏–∫–ª #{cycle}: Hands-Free –ø–æ—à—É–∫...")
            
            # –®—É–∫–∞—î–º–æ –ë–ï–ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            buttons = find_buttons_hands_free()
            
            if 'continue' in buttons and 'accept_all' in buttons:
                if are_buttons_new(buttons):
                    # –í–∏–∫–æ–Ω—É—î–º–æ —à–≤–∏–¥–∫—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å
                    if execute_hands_free_sequence(buttons):
                        print(f"‚è∞ –ü–∞—É–∑–∞ {AFTER_CLICK_PAUSE}—Å...")
                        
                        # –î–æ–≤–≥–∞ –ø–∞—É–∑–∞ –∑ —Ä—ñ–¥–∫–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                        for remaining in range(AFTER_CLICK_PAUSE, 0, -1):
                            if remaining % 15 == 0 or remaining <= 5:
                                print(f"‚è≥ {remaining}—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ü–∏–∫–ª—É...")
                            time.sleep(1)
                            
                            if check_stop_flag():
                                return
                    else:
                        time.sleep(NORMAL_PAUSE)
                else:
                    print("‚è≥ –°—Ç–∞—Ä—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏, —á–µ–∫–∞—é –Ω–æ–≤—ñ...")
                    time.sleep(NORMAL_PAUSE)
            else:
                missing = []
                if 'continue' not in buttons:
                    missing.append("Continue")
                if 'accept_all' not in buttons:
                    missing.append("Accept All")
                
                print(f"‚è≥ –û—á—ñ–∫—É—é: {', '.join(missing)}")
                time.sleep(NORMAL_PAUSE)
                
        except KeyboardInterrupt:
            print("\nüõë Hands-Free –∑—É–ø–∏–Ω–µ–Ω–æ (Ctrl+C)")
            break
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            time.sleep(NORMAL_PAUSE)

def main():
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # Hands-Free –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è PyAutoGUI
    pyautogui.FAILSAFE = True
    pyautogui.PAUSE = 0.1  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ø–∞—É–∑–∞
    
    try:
        if not validate_image_files():
            return False
        
        print("üéØ HANDS-FREE MODE:")
        print("‚Ä¢ –ë–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏")
        print("‚Ä¢ –ë–µ–∑ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –º–∏—à—ñ")
        print("‚Ä¢ –¢—ñ–ª—å–∫–∏ —à–≤–∏–¥–∫—ñ –∫–ª—ñ–∫–∏\n")
        
        main_hands_free_loop()
        
        print("‚úÖ Hands-Free –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)