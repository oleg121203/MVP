#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –Ω–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏ –¥–µ—Ç–µ–∫—Ü—ñ—ó –∫–Ω–æ–ø–æ–∫ –ø–æ–±–ª–∏–∑—É
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –Ü–º—ñ—Ç—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö –∫–Ω–æ–ø–∫–∏
class MockLocation:
    def __init__(self, x, y, width, height):
        self.left = x
        self.top = y
        self.width = width
        self.height = height

class MockCenter:
    def __init__(self, x, y):
        self.x = x
        self.y = y

def create_mock_button(x, y, name):
    """–°—Ç–≤–æ—Ä—é—î —ñ–º—ñ—Ç–∞—Ü—ñ—é –¥–∞–Ω–∏—Ö –∫–Ω–æ–ø–∫–∏."""
    return {
        'location': MockLocation(x, y, 100, 40),
        'center': MockCenter(x + 50, y + 20),
        'confidence': 0.9
    }

def are_buttons_close(button1_data, button2_data, proximity_threshold=100):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –¥–≤—ñ –∫–Ω–æ–ø–∫–∏ –ø–æ–±–ª–∏–∑—É –æ–¥–Ω–∞ –æ–¥–Ω–æ—ó."""
    if not button1_data or not button2_data:
        return False
    
    center1 = button1_data['center']
    center2 = button2_data['center']
    
    distance = ((center1.x - center2.x) ** 2 + (center1.y - center2.y) ** 2) ** 0.5
    
    return distance <= proximity_threshold

def detect_continue_near_accept(buttons):
    """–î–µ—Ç–µ–∫—Ü—ñ—è –ø–æ—è–≤–∏ Continue –ø–æ–±–ª–∏–∑—É Accept All - —Ç—Ä–∏–≥–µ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó."""
    if 'continue' not in buttons or 'accept_all' not in buttons:
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ Continue –∑'—è–≤–∏–≤—Å—è –ø–æ–±–ª–∏–∑—É Accept All
    if are_buttons_close(buttons['continue'], buttons['accept_all'], proximity_threshold=150):
        continue_pos = buttons['continue']['center']
        accept_pos = buttons['accept_all']['center']
        print(f"üéØ Continue –ø–æ–±–ª–∏–∑—É Accept All: Continue({continue_pos.x},{continue_pos.y}) Accept({accept_pos.x},{accept_pos.y})")
        return True
    
    return False

def test_proximity_logic():
    """–¢–µ—Å—Ç—É—î –ª–æ–≥—ñ–∫—É –±–ª–∏–∑—å–∫–æ—Å—Ç—ñ –∫–Ω–æ–ø–æ–∫."""
    print("üß™ –¢–ï–°–¢ –õ–û–ì–Ü–ö–ò –ë–õ–ò–ó–¨–ö–û–°–¢–Ü –ö–ù–û–ü–û–ö")
    print("=" * 40)
    
    # –¢–µ—Å—Ç 1: –ö–Ω–æ–ø–∫–∏ –±–ª–∏–∑—å–∫–æ
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç: –ö–Ω–æ–ø–∫–∏ –±–ª–∏–∑—å–∫–æ (–º–∞—î —Å–ø—Ä–∞—Ü—é–≤–∞—Ç–∏)")
    buttons_close = {
        'accept_all': create_mock_button(500, 600, 'Accept All'),
        'continue': create_mock_button(550, 620, 'Continue')  # –ù–∞ 60 –ø—ñ–∫—Å–µ–ª—ñ–≤ –ø—Ä–∞–≤—ñ—à–µ —ñ –Ω–∏–∂—á–µ
    }
    
    result = detect_continue_near_accept(buttons_close)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –¢–†–ò–ì–ï–† –°–ü–†–ê–¶–Æ–í–ê–í' if result else '‚ùå –¢—Ä–∏–≥–µ—Ä –ù–ï —Å–ø—Ä–∞—Ü—é–≤–∞–≤'}")
    
    # –¢–µ—Å—Ç 2: –ö–Ω–æ–ø–∫–∏ –¥–∞–ª–µ–∫–æ
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç: –ö–Ω–æ–ø–∫–∏ –¥–∞–ª–µ–∫–æ (–ù–ï –º–∞—î —Å–ø—Ä–∞—Ü—é–≤–∞—Ç–∏)")
    buttons_far = {
        'accept_all': create_mock_button(500, 600, 'Accept All'),
        'continue': create_mock_button(800, 400, 'Continue')  # –î–∞–ª–µ–∫–æ
    }
    
    result = detect_continue_near_accept(buttons_far)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚ùå –ü–û–ú–ò–õ–ö–ê - —Ç—Ä–∏–≥–µ—Ä —Å–ø—Ä–∞—Ü—é–≤–∞–≤' if result else '‚úÖ –¢—Ä–∏–≥–µ—Ä –ù–ï —Å–ø—Ä–∞—Ü—é–≤–∞–≤'}")
    
    # –¢–µ—Å—Ç 3: –¢–æ—á–Ω–æ –≤ –º–µ–∂—ñ (150 –ø—ñ–∫—Å–µ–ª—ñ–≤)
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç: –ù–∞ –º–µ–∂—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ 150px (–º–∞—î —Å–ø—Ä–∞—Ü—é–≤–∞—Ç–∏)")
    buttons_edge = {
        'accept_all': create_mock_button(500, 600, 'Accept All'),
        'continue': create_mock_button(650, 600, 'Continue')  # –†—ñ–≤–Ω–æ 150 –ø—ñ–∫—Å–µ–ª—ñ–≤ –ø—Ä–∞–≤—ñ—à–µ
    }
    
    result = detect_continue_near_accept(buttons_edge)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –¢–†–ò–ì–ï–† –°–ü–†–ê–¶–Æ–í–ê–í' if result else '‚ùå –¢—Ä–∏–≥–µ—Ä –ù–ï —Å–ø—Ä–∞—Ü—é–≤–∞–≤'}")
    
    # –¢–µ—Å—Ç 4: –¢—ñ–ª—å–∫–∏ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç: –¢—ñ–ª—å–∫–∏ Accept All (–ù–ï –º–∞—î —Å–ø—Ä–∞—Ü—é–≤–∞—Ç–∏)")
    buttons_single = {
        'accept_all': create_mock_button(500, 600, 'Accept All')
    }
    
    result = detect_continue_near_accept(buttons_single)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚ùå –ü–û–ú–ò–õ–ö–ê - —Ç—Ä–∏–≥–µ—Ä —Å–ø—Ä–∞—Ü—é–≤–∞–≤' if result else '‚úÖ –¢—Ä–∏–≥–µ—Ä –ù–ï —Å–ø—Ä–∞—Ü—é–≤–∞–≤'}")
    
    print("\nüéØ –í–ò–°–ù–û–í–û–ö:")
    print("   –õ–æ–≥—ñ–∫–∞ –¥–µ—Ç–µ–∫—Ü—ñ—ó Continue –ø–æ–±–ª–∏–∑—É Accept All –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ!")
    print("   –¢—Ä–∏–≥–µ—Ä —Å–ø—Ä–∞—Ü—å–æ–≤—É—î —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –æ–±–∏–¥–≤—ñ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ —ñ –±–ª–∏–∑—å–∫–æ.")

if __name__ == "__main__":
    test_proximity_logic()
