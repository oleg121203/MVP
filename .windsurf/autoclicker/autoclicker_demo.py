#!/usr/bin/env python3
"""
VentAI Enterprise Autoclicker - –î–ï–ú–û –≤–µ—Ä—Å—ñ—è –∑ –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∑–∞ 20 —Å–µ–∫—É–Ω–¥ –∑–∞–º—ñ—Å—Ç—å 60
"""

import os
import sys
import time
import signal
import pyautogui
import hashlib
from pathlib import Path
from PIL import Image
import io

# ===== –î–ï–ú–û –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =====
CONFIDENCE = 0.7
NORMAL_PAUSE = 5  # –ö–æ—Ä–æ—Ç—à–∞ –ø–∞—É–∑–∞ –¥–ª—è –¥–µ–º–æ
AFTER_CLICK_PAUSE = 30  # –ö–æ—Ä–æ—Ç—à–∞ –ø–∞—É–∑–∞ –ø—ñ—Å–ª—è –∫–ª—ñ–∫—ñ–≤
SEQUENCE_PAUSE = 2
VERBOSE_LOGGING = True

# –ù–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è VentAI Enterprise –î–ï–ú–û
INACTIVITY_TIMEOUT = 20  # 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
ACTIVATION_COMMAND = "VENTAI ENTERPRISE ACTIVATE"
SCREEN_CHECK_INTERVAL = 5  # –ß–∞—Å—Ç—ñ—à–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –¥–µ–º–æ

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
last_button_coordinates = {}
script_running = True
last_screen_hash = None
last_activity_time = time.time()
activation_attempted = False

# –®–ª—è—Ö–∏ –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å
script_dir = Path(__file__).parent
images_dir = script_dir / "images"
ACCEPT_ALL_BUTTON = str(images_dir / "accept_all.png")
CONTINUE_BUTTON = str(images_dir / "continue.png")

def signal_handler(signum, frame):
    global script_running
    print("\nüõë VentAI Enterprise –î–ï–ú–û –∑—É–ø–∏–Ω–µ–Ω–æ.")
    script_running = False
    sys.exit(0)

def check_stop_flag():
    stop_flag_path = script_dir / "stop.flag"
    if stop_flag_path.exists():
        print("üõë –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª 'stop.flag'. –ó—É–ø–∏–Ω—è—é —Å–∫—Ä–∏–ø—Ç...")
        stop_flag_path.unlink()
        return True
    return False

def validate_image_files():
    missing_files = []
    if not os.path.exists(ACCEPT_ALL_BUTTON):
        missing_files.append(ACCEPT_ALL_BUTTON)
    if not os.path.exists(CONTINUE_BUTTON):
        missing_files.append(CONTINUE_BUTTON)
    
    if missing_files:
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å:")
        for file in missing_files:
            print(f"   - {file}")
        return False
    
    print("‚úÖ –§–∞–π–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑–Ω–∞–π–¥–µ–Ω–æ:")
    print(f"   - {ACCEPT_ALL_BUTTON}")
    print(f"   - {CONTINUE_BUTTON}")
    return True

def find_buttons_hands_free():
    """–®—É–∫–∞—î –∫–Ω–æ–ø–∫–∏ –ë–ï–ó –±—É–¥—å-—è–∫–æ—ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∞–±–æ —Ä—É—Ö—ñ–≤ –º–∏—à—ñ."""
    buttons_found = {}
    
    try:
        if VERBOSE_LOGGING:
            print("üîç –î–ï–ú–û: Hands-Free –ø–æ—à—É–∫...")
        
        # –®—É–∫–∞—î–º–æ Continue –ø–æ –≤—Å—å–æ–º—É –µ–∫—Ä–∞–Ω—É
        try:
            continue_location = pyautogui.locateOnScreen(CONTINUE_BUTTON, confidence=CONFIDENCE)
            if continue_location:
                continue_center = pyautogui.center(continue_location)
                buttons_found['continue'] = {
                    'location': continue_location,
                    'center': continue_center
                }
                print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ 'Continue': {continue_location}")
        except pyautogui.ImageNotFoundException:
            pass
        
        # –®—É–∫–∞—î–º–æ Accept All –ø–æ –≤—Å—å–æ–º—É –µ–∫—Ä–∞–Ω—É
        try:
            accept_location = pyautogui.locateOnScreen(ACCEPT_ALL_BUTTON, confidence=CONFIDENCE)
            if accept_location:
                accept_center = pyautogui.center(accept_location)
                buttons_found['accept_all'] = {
                    'location': accept_location,
                    'center': accept_center
                }
                print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ 'Accept all': {accept_location}")
        except pyautogui.ImageNotFoundException:
            pass
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É: {e}")
    
    return buttons_found

def are_buttons_new(buttons):
    global last_button_coordinates
    
    for button_type, button_data in buttons.items():
        location = button_data['location']
        key = f"{button_type}_{location.left}_{location.top}"
        
        if key in last_button_coordinates:
            if VERBOSE_LOGGING:
                print(f"‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ {button_type} –≤ —Å—Ç–∞—Ä–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö")
            return False
    
    print("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ñ –∫–Ω–æ–ø–∫–∏!")
    return True

def update_button_coordinates(buttons):
    global last_button_coordinates
    
    for button_type, button_data in buttons.items():
        location = button_data['location']
        key = f"{button_type}_{location.left}_{location.top}"
        last_button_coordinates[key] = time.time()

def click_button_hands_free(button_data, button_name):
    """–®–≤–∏–¥–∫–∏–π –∫–ª—ñ–∫ –ë–ï–ó –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –º–∏—à—ñ."""
    try:
        center = button_data['center']
        pyautogui.click(center.x, center.y, duration=0.05)
        print(f"‚ö° –î–ï–ú–û –∫–ª—ñ–∫: '{button_name}' –≤ {center}")
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–ª—ñ–∫—É {button_name}: {e}")
        return False

def find_chat_input_field():
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥—É —á–∞—Ç—É."""
    try:
        screen_width, screen_height = pyautogui.size()
        
        # –ú–æ–∂–ª–∏–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–æ–ª—è –≤–≤–æ–¥—É
        possible_inputs = [
            (screen_width // 2, screen_height - 100),
            (screen_width // 2, screen_height - 150),
            (screen_width // 2, screen_height - 80),
        ]
        
        for x, y in possible_inputs:
            try:
                pyautogui.click(x, y, duration=0.1)
                time.sleep(0.5)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∞–∫—Ç–∏–≤–Ω–µ –ø–æ–ª–µ –≤–≤–æ–¥—É
                pyautogui.typewrite("test")
                pyautogui.hotkey('ctrl', 'a')
                pyautogui.press('backspace')
                
                print(f"‚úÖ –î–ï–ú–û: –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤–≤–æ–¥—É –≤ {x}, {y}")
                return (x, y)
            except:
                continue
        
        return None
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –ø–æ–ª—è –≤–≤–æ–¥—É: {e}")
        return None

def activate_ventai_enterprise():
    """–î–ï–ú–û: –ê–∫—Ç–∏–≤—É—î VentAI Enterprise –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ."""
    global activation_attempted
    
    if activation_attempted:
        return False
    
    print("\nüöÄ –î–ï–ú–û: –ê–ö–¢–ò–í–ê–¶–Ü–Ø VENTAI ENTERPRISE")
    print("===================================")
    
    try:
        # 1. –ù–∞—Ç–∏—Å–∫–∞—î–º–æ Escape
        print("1Ô∏è‚É£ –î–ï–ú–û: –ù–∞—Ç–∏—Å–∫–∞—é Escape...")
        pyautogui.press('escape')
        time.sleep(1)
        
        # 2. –®—É–∫–∞—î–º–æ Accept All
        print("2Ô∏è‚É£ –î–ï–ú–û: –®—É–∫–∞—é Accept All...")
        try:
            accept_location = pyautogui.locateOnScreen(ACCEPT_ALL_BUTTON, confidence=CONFIDENCE)
            if accept_location:
                accept_center = pyautogui.center(accept_location)
                pyautogui.click(accept_center.x, accept_center.y, duration=0.1)
                print(f"‚úÖ –î–ï–ú–û: –ù–∞—Ç–∏—Å–Ω—É—Ç–æ Accept All –≤ {accept_center}")
                time.sleep(2)
            else:
                print("‚ö†Ô∏è –î–ï–ú–û: Accept All –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        except pyautogui.ImageNotFoundException:
            print("‚ö†Ô∏è –î–ï–ú–û: Accept All –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        # 3. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–ª–µ —á–∞—Ç—É
        print("3Ô∏è‚É£ –î–ï–ú–û: –®—É–∫–∞—é –ø–æ–ª–µ —á–∞—Ç—É...")
        chat_input = find_chat_input_field()
        
        if chat_input:
            x, y = chat_input
            
            # 4. –ü–ï–†–®–ê –∞–∫—Ç–∏–≤–∞—Ü—ñ—è –ø–æ–ª—è
            print("4Ô∏è‚É£ –î–ï–ú–û: –ü–ï–†–®–ê –∞–∫—Ç–∏–≤–∞—Ü—ñ—è –ø–æ–ª—è...")
            pyautogui.click(x, y, duration=0.1)
            time.sleep(2)  # –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥–∏
            
            # 5. –î–†–£–ì–ê –∞–∫—Ç–∏–≤–∞—Ü—ñ—è –ø–æ–ª—è
            print("5Ô∏è‚É£ –î–ï–ú–û: –î–†–£–ì–ê –∞–∫—Ç–∏–≤–∞—Ü—ñ—è –ø–æ–ª—è...")
            pyautogui.click(x, y, duration=0.1)
            time.sleep(1)
            
            # 6. –û—á–∏—â–∞—î–º–æ —Ç–∞ –≤–≤–æ–¥–∏–º–æ –∫–æ–º–∞–Ω–¥—É
            print("6Ô∏è‚É£ –î–ï–ú–û: –í–≤–æ–¥–∂—É –∫–æ–º–∞–Ω–¥—É...")
            pyautogui.hotkey('ctrl', 'a')
            pyautogui.press('backspace')
            time.sleep(0.5)
            
            # –í–≤–æ–¥–∏–º–æ –∫–æ–º–∞–Ω–¥—É
            pyautogui.typewrite(ACTIVATION_COMMAND, interval=0.05)
            time.sleep(1)
            
            # 7. Enter
            print("7Ô∏è‚É£ –î–ï–ú–û: –í—ñ–¥–ø—Ä–∞–≤–ª—è—é (Enter)...")
            pyautogui.press('enter')
            
            print("‚úÖ –î–ï–ú–û: VENTAI ENTERPRISE –ê–ö–¢–ò–í–û–í–ê–ù–û!")
            print(f"üìù –ö–æ–º–∞–Ω–¥–∞: {ACTIVATION_COMMAND}")
            
            activation_attempted = True
            return True
        else:
            print("‚ùå –î–ï–ú–û: –ü–æ–ª–µ —á–∞—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
            
    except Exception as e:
        print(f"‚ùå –î–ï–ú–û –ø–æ–º–∏–ª–∫–∞: {e}")
        return False

def execute_hands_free_sequence(buttons):
    """–î–ï–ú–û: –í–∏–∫–æ–Ω—É—î —à–≤–∏–¥–∫—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å."""
    print("\n‚ö° –î–ï–ú–û: HANDS-FREE –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å...\n")
    
    # 1. Accept All
    print("1Ô∏è‚É£ –î–ï–ú–û: –ö–ª—ñ–∫ Accept All...")
    if not click_button_hands_free(buttons['accept_all'], 'Accept All'):
        return False
    
    # 2. –ü–∞—É–∑–∞
    print(f"‚è≥ –î–ï–ú–û: –ü–∞—É–∑–∞ {SEQUENCE_PAUSE}—Å...")
    time.sleep(SEQUENCE_PAUSE)
    
    # 3. Continue
    print("2Ô∏è‚É£ –î–ï–ú–û: –ö–ª—ñ–∫ Continue...")
    if not click_button_hands_free(buttons['continue'], 'Continue'):
        return False
    
    # 4. –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
    update_button_coordinates(buttons)
    
    print("‚úÖ –î–ï–ú–û: –ü–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n")
    return True

def check_inactivity():
    """–î–ï–ú–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å."""
    global last_activity_time, activation_attempted
    
    current_time = time.time()
    inactive_time = current_time - last_activity_time
    
    if inactive_time >= INACTIVITY_TIMEOUT and not activation_attempted:
        print(f"\n‚è∞ –î–ï–ú–û: –ù–ï–ê–ö–¢–ò–í–ù–Ü–°–¢–¨ {inactive_time:.0f}—Å (>{INACTIVITY_TIMEOUT}—Å)")
        print("üéØ –î–ï–ú–û: –£–º–æ–≤–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –≤–∏–∫–æ–Ω–∞–Ω—ñ!")
        return True
    
    return False

def main_demo_loop():
    """–î–ï–ú–û: –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∑ —à–≤–∏–¥–∫–æ—é –∞–∫—Ç–∏–≤–∞—Ü—ñ—î—é."""
    global script_running, last_activity_time
    
    print("üöÄ VENTAI ENTERPRISE –ê–í–¢–û–ö–õ–ò–ö–ï–† - –î–ï–ú–û")
    print("=====================================")
    print("üñ±Ô∏è –ú–∏—à–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –í–Ü–õ–¨–ù–û–Æ")
    print("üìú –ë–ï–ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏")
    print("‚ö° –¢—ñ–ª—å–∫–∏ —à–≤–∏–¥–∫—ñ –∫–ª—ñ–∫–∏")
    print(f"üéØ –î–ï–ú–û: –ê–≤—Ç–æ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –ø—ñ—Å–ª—è {INACTIVITY_TIMEOUT}—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
    print("üí° –î–ª—è –∑—É–ø–∏–Ω–∫–∏: Ctrl+C –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å stop.flag\n")
    
    cycle = 0
    
    while script_running:
        try:
            cycle += 1
            current_time = time.time()
            
            if check_stop_flag():
                break
            
            print(f"üîç –î–ï–ú–û –¶–∏–∫–ª #{cycle}: –ü–æ—à—É–∫...")
            
            # –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫–∏
            buttons = find_buttons_hands_free()
            
            if 'continue' in buttons and 'accept_all' in buttons:
                if are_buttons_new(buttons):
                    # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å
                    if execute_hands_free_sequence(buttons):
                        # –û–ù–û–í–õ–Æ–Ñ–ú–û –ê–ö–¢–ò–í–ù–Ü–°–¢–¨ –í –ö–Ü–ù–¶–Ü
                        last_activity_time = time.time()
                        print(f"‚úÖ –î–ï–ú–û: –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–∞! –ù–æ–≤–∏–π –≤—ñ–¥–ª—ñ–∫: 0—Å/{INACTIVITY_TIMEOUT}—Å")
                        print(f"‚è∞ –î–ï–ú–û: –ü–∞—É–∑–∞ {AFTER_CLICK_PAUSE}—Å...")
                        
                        # –ö–æ—Ä–æ—Ç—à–∞ –ø–∞—É–∑–∞ –¥–ª—è –¥–µ–º–æ
                        for remaining in range(AFTER_CLICK_PAUSE, 0, -1):
                            if remaining % 10 == 0 or remaining <= 3:
                                print(f"‚è≥ –î–ï–ú–û: {remaining}—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ü–∏–∫–ª—É...")
                            time.sleep(1)
                            
                            if check_stop_flag():
                                return
                    else:
                        time.sleep(NORMAL_PAUSE)
                else:
                    print("‚è≥ –î–ï–ú–û: –°—Ç–∞—Ä—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏...")
                    time.sleep(NORMAL_PAUSE)
            else:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                if check_inactivity():
                    if activate_ventai_enterprise():
                        print(f"‚è∞ –î–ï–ú–û: –ü–∞—É–∑–∞ {AFTER_CLICK_PAUSE}—Å –ø—ñ—Å–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó...")
                        time.sleep(AFTER_CLICK_PAUSE)
                        last_activity_time = time.time()
                    else:
                        time.sleep(NORMAL_PAUSE)
                else:
                    missing = []
                    if 'continue' not in buttons:
                        missing.append("Continue")
                    if 'accept_all' not in buttons:
                        missing.append("Accept All")
                    
                    inactive_time = current_time - last_activity_time
                    print(f"‚è≥ –î–ï–ú–û: –û—á—ñ–∫—É—é: {', '.join(missing)} (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {inactive_time:.0f}—Å/{INACTIVITY_TIMEOUT}—Å)")
                    time.sleep(NORMAL_PAUSE)
                
        except KeyboardInterrupt:
            print("\nüõë –î–ï–ú–û –∑—É–ø–∏–Ω–µ–Ω–æ (Ctrl+C)")
            break
        except Exception as e:
            print(f"‚ùå –î–ï–ú–û –ø–æ–º–∏–ª–∫–∞: {e}")
            time.sleep(NORMAL_PAUSE)

def main():
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –î–ï–ú–û –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è PyAutoGUI
    pyautogui.FAILSAFE = True
    pyautogui.PAUSE = 0.1
    
    try:
        if not validate_image_files():
            return False
        
        print("üéØ VENTAI ENTERPRISE –î–ï–ú–û MODE:")
        print("‚Ä¢ –®–≤–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—è (20—Å)")
        print("‚Ä¢ –ë–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏")
        print("‚Ä¢ –ë–µ–∑ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –º–∏—à—ñ")
        print("‚Ä¢ –¢—ñ–ª—å–∫–∏ —à–≤–∏–¥–∫—ñ –∫–ª—ñ–∫–∏\n")
        
        main_demo_loop()
        
        print("‚úÖ –î–ï–ú–û –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        return True
        
    except Exception as e:
        print(f"‚ùå –î–ï–ú–û –ø–æ–º–∏–ª–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)