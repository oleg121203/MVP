#!/bin/zsh

# üöÄ Windsurf Enterprise MCP Server Setup & Launch Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∑ PostgreSQL —ñ Redis

echo "üéØ WINDSURF ENTERPRISE MCP SERVER SETUP"
echo "========================================"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥
check_requirements() {
    echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥..."
    
    # Node.js
    if ! command -v node &> /dev/null; then
        echo "‚ùå Node.js –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Node.js 18+ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è."
        exit 1
    fi
    
    local node_version=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$node_version" -lt 18 ]; then
        echo "‚ùå Node.js –≤–µ—Ä—Å—ñ—è $node_version < 18. –û–Ω–æ–≤—ñ—Ç—å Node.js."
        exit 1
    fi
    
    # Docker
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è."
        exit 1
    fi
    
    # Docker Compose
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        echo "‚ùå Docker Compose –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
        exit 1
    fi
    
    echo "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏ –≤–∏–∫–æ–Ω–∞–Ω–æ"
}

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
setup_environment() {
    echo "üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞..."
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    if [ ! -f .env ]; then
        echo "üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É..."
        cp .env.example .env
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ access token
        local access_token="windsurf_$(date +%s)_$(openssl rand -hex 8)"
        sed -i "s/ACCESS_TOKEN=.*/ACCESS_TOKEN=$access_token/" .env
        
        echo "üîë –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ access token: $access_token"
    fi
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
    mkdir -p logs data config
    mkdir -p init-db grafana/dashboards grafana/provisioning
    
    echo "‚úÖ –°–µ—Ä–µ–¥–æ–≤–∏—â–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
}

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
setup_database() {
    echo "üóÑÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è PostgreSQL –∑ –≤–µ–∫—Ç–æ—Ä–Ω–∏–º —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º..."
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è init script –¥–ª—è PostgreSQL
    cat > init-db/01-init-vector.sql << 'EOF'
-- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è Windsurf
CREATE EXTENSION IF NOT EXISTS vector;
CREATE EXTENSION IF NOT EXISTS pg_trgm;
CREATE EXTENSION IF NOT EXISTS btree_gin;

-- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ö–µ–º–∏ –¥–ª—è Windsurf
CREATE SCHEMA IF NOT EXISTS windsurf;

-- –ù–∞–¥–∞–Ω–Ω—è –ø—Ä–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
GRANT ALL PRIVILEGES ON SCHEMA windsurf TO ventai_dev;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA windsurf TO ventai_dev;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA windsurf TO ventai_dev;

-- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –ø–æ—à—É–∫—É
CREATE TEXT SEARCH CONFIGURATION ukrainian (COPY = simple);
EOF
    
    echo "‚úÖ PostgreSQL –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ"
}

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Redis
setup_redis() {
    echo "üîÑ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Redis..."
    
    cat > redis.conf << 'EOF'
# Redis configuration –¥–ª—è Windsurf Enterprise
port 6379
bind 0.0.0.0
timeout 300
keepalive 300

# Memory configuration
maxmemory 512mb
maxmemory-policy allkeys-lru

# Persistence
save 900 1
save 300 10
save 60 10000

# Logging
loglevel notice
logfile ""

# Ukrainian locale support
# Character encoding
locale-archive /usr/lib/locale/locale-archive
EOF
    
    echo "‚úÖ Redis –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ"
}

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
install_dependencies() {
    echo "üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Node.js –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
    
    if [ ! -d "node_modules" ]; then
        npm install
    else
        echo "‚úÖ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ"
    fi
    
    echo "‚úÖ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
}

# –ó–±—ñ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç—É
build_project() {
    echo "üî® –ó–±—ñ—Ä–∫–∞ TypeScript –ø—Ä–æ–µ–∫—Ç—É..."
    
    npm run build
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø—ñ—à–Ω–æ –∑—ñ–±—Ä–∞–Ω–æ"
    else
        echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±—ñ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç—É"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤—ñ—Å—ñ–≤
start_docker_services() {
    echo "üê≥ –ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    
    # –ó—É–ø–∏–Ω–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    docker-compose down 2>/dev/null || true
    
    # –ó–∞–ø—É—Å–∫ —Ç—ñ–ª—å–∫–∏ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
    docker-compose up -d postgres redis
    
    echo "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    sleep 15
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
    local postgres_status=$(docker-compose ps postgres | grep "Up" | wc -l)
    local redis_status=$(docker-compose ps redis | grep "Up" | wc -l)
    
    if [ "$postgres_status" -eq 1 ] && [ "$redis_status" -eq 1 ]; then
        echo "‚úÖ Docker —Å–µ—Ä–≤—ñ—Å–∏ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
    else
        echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Docker —Å–µ—Ä–≤—ñ—Å—ñ–≤"
        docker-compose logs
        exit 1
    fi
}

# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω—å
test_connections() {
    echo "üîå –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω—å..."
    
    # –¢–µ—Å—Ç PostgreSQL
    local pg_test=$(docker exec windsurf-postgres pg_isready -U ventai_dev -d ventai_dev)
    if [[ $pg_test == *"accepting connections"* ]]; then
        echo "‚úÖ PostgreSQL –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ"
    else
        echo "‚ùå PostgreSQL –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ–≤–¥–∞–ª–µ"
        exit 1
    fi
    
    # –¢–µ—Å—Ç Redis
    local redis_test=$(docker exec windsurf-redis redis-cli ping)
    if [[ $redis_test == "PONG" ]]; then
        echo "‚úÖ Redis –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ"
    else
        echo "‚ùå Redis –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ–≤–¥–∞–ª–µ"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞
start_mcp_server() {
    echo "üöÄ –ó–∞–ø—É—Å–∫ Windsurf Enterprise MCP Server..."
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    source .env
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ OpenAI –∫–ª—é—á–∞
    if [ -z "$OPENAI_API_KEY" ] || [ "$OPENAI_API_KEY" = "your_openai_api_key_here" ]; then
        echo "‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –í–µ–∫—Ç–æ—Ä–Ω–∏–π –ø–æ—à—É–∫ –±—É–¥–µ –æ–±–º–µ–∂–µ–Ω–∏–π."
        echo "üí° –î–æ–¥–∞–π—Ç–µ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª –¥–ª—è –ø–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ."
    fi
    
    # –ó–∞–ø—É—Å–∫ —É —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏ –∞–±–æ –ø—Ä–æ–¥–∞–∫—à–Ω
    if [ "$1" = "dev" ]; then
        echo "üîß –ó–∞–ø—É—Å–∫ —É —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏..."
        npm run dev
    else
        echo "üè≠ –ó–∞–ø—É—Å–∫ —É –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º—ñ..."
        npm start
    fi
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
create_documentation() {
    echo "üìö –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó..."
    
    cat > README.md << 'EOF'
# üöÄ Windsurf Enterprise MCP Server

## –í–µ–∫—Ç–æ—Ä–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑ PostgreSQL + Redis —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é

### –ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
- üîç **–í–µ–∫—Ç–æ—Ä–Ω–∏–π –ø–æ—à—É–∫** –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑ AI embeddings
- üï∏Ô∏è **–ì—Ä–∞—Ñ–æ–≤—ñ –∑–≤'—è–∑–∫–∏** –º—ñ–∂ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ —Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏  
- üìä **–†–æ–∑—É–º–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó** –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
- üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è** –∑ —Ñ–∞–π–ª–æ–≤–æ—é —Å–∏—Å—Ç–µ–º–æ—é
- üìà **–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥** –æ–ø–µ—Ä–∞—Ü—ñ–π

### –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç
```bash
# –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
./setup-enterprise-mcp.sh

# –ó–∞–ø—É—Å–∫ —É —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏
./setup-enterprise-mcp.sh dev
```

### –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞
- **PostgreSQL** –∑ pgvector –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ—à—É–∫—É
- **Redis** –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è —Ç–∞ —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
- **OpenAI** –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó embeddings (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
- **MCP Protocol** –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ AI –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏

### –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
- `vector_search_documents` - –°–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫
- `smart_recommendations` - AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
- `graph_relations` - –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –∑–≤'—è–∑–∫—ñ–≤
- `sync_to_vector_store` - –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤

### –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
- Grafana: http://localhost:3000
- Prometheus: http://localhost:9090
- Logs: `./logs/windsurf-mcp.log`
EOF
    
    echo "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ"
}

# –í–∏–≤–µ–¥–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
show_status() {
    echo ""
    echo "üéâ WINDSURF ENTERPRISE MCP SERVER –ì–û–¢–û–í–ò–ô!"
    echo "=========================================="
    echo ""
    echo "üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:"
    echo "  PostgreSQL: localhost:5433"
    echo "  Redis: localhost:6380"
    echo "  MCP Server: stdio protocol"
    echo ""
    echo "üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥:"
    echo "  Grafana: http://localhost:3000 (admin/windsurf_admin)"
    echo "  Prometheus: http://localhost:9090"
    echo ""
    echo "üìÅ –§–∞–π–ª–∏:"
    echo "  –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: .env"
    echo "  –õ–æ–≥–∏: ./logs/"
    echo "  –î–∞–Ω—ñ: ./data/"
    echo ""
    echo "üõ†Ô∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è:"
    echo "  –ó—É–ø–∏–Ω–∫–∞: docker-compose down"
    echo "  –õ–æ–≥–∏: docker-compose logs -f"
    echo "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose restart"
    echo ""
    echo "üöÄ –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ –∑ Claude Desktop –∞–±–æ VS Code!"
}

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
main() {
    echo "–ü–æ—á–∞—Ç–æ–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Windsurf Enterprise MCP Server..."
    
    check_requirements
    setup_environment  
    setup_database
    setup_redis
    install_dependencies
    build_project
    start_docker_services
    test_connections
    create_documentation
    
    # –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞
    if [ "$1" = "setup-only" ]; then
        echo "‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä: npm start"
    else
        start_mcp_server "$1"
    fi
    
    show_status
}

# –û–±—Ä–æ–±–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
case "$1" in
    "dev")
        main "dev"
        ;;
    "setup-only")
        main "setup-only"
        ;;
    "help"|"-h"|"--help")
        echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 [dev|setup-only|help]"
        echo "  dev        - –ó–∞–ø—É—Å–∫ —É —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏"
        echo "  setup-only - –¢—ñ–ª—å–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑ –∑–∞–ø—É—Å–∫—É"
        echo "  help       - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
        ;;
    *)
        main
        ;;
esac
