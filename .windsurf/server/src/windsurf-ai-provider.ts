#!/usr/bin/env node

/**
 * üåä Windsurf Native AI Provider –¥–ª—è Enterprise MCP Server
 * –°–∏–º—É–ª—è—Ü—ñ—è –≤–±—É–¥–æ–≤–∞–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π Windsurf (–±—É–¥–µ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ –∑ —Ä–µ–∞–ª—å–Ω–∏–º Windsurf API)
 */

interface WindsurfAIModel {
  id: string;
  name: string;
  vendor: string;
  family: string;
  type: 'chat' | 'embeddings' | 'reasoning';
  available: boolean;
  credits?: string;
  features?: string[];
}

interface WindsurfProvider {
  vendor: string;
  name: string;
  models: WindsurfAIModel[];
  available: boolean;
  totalCredits?: string;
}

interface ChatResponse {
  content: string;
  provider: string;
  model: string;
  vendor: string;
  tokens?: {
    input: number;
    output: number;
  };
}

interface EmbeddingResult {
  embedding: number[];
  provider: string;
  model: string;
  vendor: string;
  dimensions?: number;
}

// –°–∏–º—É–ª—è—Ü—ñ—è Windsurf Language Model API
interface MockLanguageModelChat {
  id: string;
  name: string;
  vendor: string;
  family: string;
  maxInputTokens: number;
}

class MockWindsurfAPI {
  private static models: MockLanguageModelChat[] = [
    {
      id: 'claude-3.5-sonnet',
      name: 'Claude 3.5 Sonnet',
      vendor: 'anthropic',
      family: 'claude-3-5-sonnet',
      maxInputTokens: 200000
    },
    {
      id: 'gpt-4o',
      name: 'GPT-4o',
      vendor: 'openai',
      family: 'gpt-4',
      maxInputTokens: 128000
    },
    {
      id: 'gemini-2.5-pro',
      name: 'Gemini 2.5 Pro',
      vendor: 'google',
      family: 'gemini',
      maxInputTokens: 1000000
    },
    {
      id: 'grok-3',
      name: 'Grok-3',
      vendor: 'xai',
      family: 'grok',
      maxInputTokens: 128000
    },
    {
      id: 'deepseek-v3',
      name: 'DeepSeek V3',
      vendor: 'deepseek',
      family: 'deepseek',
      maxInputTokens: 64000
    },
    {
      id: 'windsurf-swe-1',
      name: 'SWE-1',
      vendor: 'windsurf',
      family: 'swe',
      maxInputTokens: 32000
    }
  ];

  static async selectChatModels(criteria?: { vendor?: string; family?: string }): Promise<MockLanguageModelChat[]> {
    let filteredModels = this.models;
    
    if (criteria?.vendor) {
      filteredModels = filteredModels.filter(model => model.vendor === criteria.vendor);
    }
    
    if (criteria?.family) {
      filteredModels = filteredModels.filter(model => model.family.includes(criteria.family));
    }
    
    return filteredModels;
  }

  static async sendRequest(model: MockLanguageModelChat, messages: string[]): Promise<string> {
    // –°–∏–º—É–ª—è—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ AI
    const responses = {
      anthropic: "I'm Claude, an AI assistant created by Anthropic. I can help you with HVAC calculations, code analysis, and technical questions about ventilation systems.",
      openai: "Hello! I'm GPT-4, and I'm here to assist you with your HVAC engineering needs, code review, and technical calculations.",
      google: "Hi! I'm Gemini, Google's AI model. I can help with ventilation calculations, energy efficiency analysis, and programming tasks.",
      xai: "Greetings! I'm Grok, and I'm ready to help you with creative HVAC solutions and innovative engineering approaches.",
      deepseek: "Hello! I'm DeepSeek, specialized in technical analysis and code optimization for HVAC applications.",
      windsurf: "Hi! I'm Windsurf's built-in assistant, with deep knowledge of your VentAI project structure and codebase."
    };

    const response = responses[model.vendor] || "Hello! I'm an AI assistant ready to help you.";
    
    // –°–∏–º—É–ª—è—Ü—ñ—è –∑–∞—Ç—Ä–∏–º–∫–∏ –º–µ—Ä–µ–∂—ñ
    await new Promise(resolve => setTimeout(resolve, Math.random() * 1000 + 500));
    
    return response;
  }

  static async countTokens(text: string): Promise<number> {
    // –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ–∫–µ–Ω—ñ–≤ (1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∏)
    return Math.ceil(text.length / 4);
  }
}

export class WindsurfAIProvider {
  private windsurfProviders: WindsurfProvider[] = [];
  private currentModel: MockLanguageModelChat | null = null;
  private initialized: boolean = false;

  constructor() {
    this.initializeWindsurfModels();
  }

  /**
   * üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π Windsurf (–¢–û–ß–ù–Ü –î–ê–ù–Ü 2025-06-11)
   */
  private async initializeWindsurfModels(): Promise<void> {
    try {
      // –¢–æ—á–Ω—ñ –¥–∞–Ω—ñ –∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Windsurf API
      this.windsurfProviders = [
        {
          vendor: 'windsurf',
          name: 'Windsurf Built-in',
          available: true,
          models: [
            {
              id: 'windsurf-swe-1',
              name: 'SWE-1 (free limited time)',
              vendor: 'windsurf',
              family: 'swe',
              type: 'chat',
              available: true,
              credits: 'free',
              features: ['code-generation', 'debugging', 'refactoring']
            },
            {
              id: 'windsurf-swe-1-lite',
              name: 'SWE-1-lite',
              vendor: 'windsurf',
              family: 'swe',
              type: 'chat',
              available: true,
              credits: 'free',
              features: ['quick-assistance', 'code-completion']
            }
          ]
        },
        {
          vendor: 'openai',
          name: 'OpenAI (via Windsurf)',
          available: true,
          totalCredits: '1x credit',
          models: [
            {
              id: 'gpt-4o',
              name: 'GPT-4o',
              vendor: 'openai',
              family: 'gpt-4',
              type: 'chat',
              available: true,
              credits: '1x credit'
            },
            {
              id: 'gpt-4o-mini',
              name: 'GPT-4o mini',
              vendor: 'openai',
              family: 'gpt-4',
              type: 'chat',
              available: true,
              credits: '0.1x credit'
            },
            {
              id: 'o3-mini-reasoning',
              name: 'o3-mini (medium reasoning)',
              vendor: 'openai',
              family: 'o3',
              type: 'reasoning',
              available: true,
              credits: '1x credit'
            }
          ]
        },
        {
          vendor: 'anthropic',
          name: 'Anthropic (via Windsurf)',
          available: true,
          models: [
            {
              id: 'claude-3.5-sonnet',
              name: 'Claude 3.5 Sonnet',
              vendor: 'anthropic',
              family: 'claude',
              type: 'chat',
              available: true,
              credits: '1x credit'
            },
            {
              id: 'claude-3.7-sonnet-thinking',
              name: 'Claude 3.7 Sonnet (Thinking)',
              vendor: 'anthropic',
              family: 'claude',
              type: 'reasoning',
              available: true,
              credits: '1.25x credit'
            }
          ]
        },
        {
          vendor: 'google',
          name: 'Google (via Windsurf)',
          available: true,
          models: [
            {
              id: 'gemini-2.5-pro',
              name: 'Gemini 2.5 Pro (promo)',
              vendor: 'google',
              family: 'gemini',
              type: 'chat',
              available: true,
              credits: '0.75x credit'
            },
            {
              id: 'gemini-2.5-flash',
              name: 'Gemini 2.5 Flash',
              vendor: 'google',
              family: 'gemini',
              type: 'chat',
              available: true,
              credits: '0.1x credit'
            }
          ]
        },
        {
          vendor: 'xai',
          name: 'xAI (via Windsurf)',
          available: true,
          models: [
            {
              id: 'grok-3',
              name: 'xAI Grok-3',
              vendor: 'xai',
              family: 'grok',
              type: 'chat',
              available: true,
              credits: '1x credit'
            }
          ]
        },
        {
          vendor: 'deepseek',
          name: 'DeepSeek (via Windsurf)',
          available: true,
          models: [
            {
              id: 'deepseek-v3',
              name: 'DeepSeek V3 (0324)',
              vendor: 'deepseek',
              family: 'deepseek',
              type: 'chat',
              available: true,
              credits: 'free'
            }
          ]
        }
      ];

      this.initialized = true;
      console.log(`üåä Windsurf AI Provider initialized with ${this.windsurfProviders.length} providers`);
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –º–æ–¥–µ–ª—å
      await this.initializeDefaultModel();
      
    } catch (error) {
      console.error('‚ùå Failed to initialize Windsurf models:', error);
      this.initialized = false;
    }
  }

  /**
   * üéØ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –º–æ–¥–µ–ª—ñ
   */
  private async initializeDefaultModel(): Promise<void> {
    try {
      // –°–ø—Ä–æ–±—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Claude 3.5 Sonnet —è–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –º–æ–¥–µ–ª—ñ
      const models = await MockWindsurfAPI.selectChatModels({
        vendor: 'anthropic',
        family: 'claude-3-5-sonnet'
      });

      if (models.length > 0) {
        this.currentModel = models[0];
        console.log(`‚úÖ Default model set: ${this.currentModel.name} (${this.currentModel.vendor})`);
      } else {
        // Fallback –¥–æ –±—É–¥—å-—è–∫–æ—ó –¥–æ—Å—Ç—É–ø–Ω–æ—ó –º–æ–¥–µ–ª—ñ
        const allModels = await MockWindsurfAPI.selectChatModels();
        if (allModels.length > 0) {
          this.currentModel = allModels[0];
          console.log(`‚ö†Ô∏è Using fallback model: ${this.currentModel.name}`);
        }
      }
    } catch (error) {
      console.error('‚ùå Failed to initialize default model:', error);
    }
  }

  /**
   * üìã –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤
   */
  getAvailableProviders(): WindsurfProvider[] {
    return this.windsurfProviders;
  }

  /**
   * üéØ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∑–∞ —Ç–∏–ø–æ–º
   */
  getModelsByType(type: 'chat' | 'embeddings' | 'reasoning'): WindsurfAIModel[] {
    const models: WindsurfAIModel[] = [];
    
    this.windsurfProviders.forEach(provider => {
      provider.models.forEach(model => {
        if (model.type === type && model.available) {
          models.push(model);
        }
      });
    });
    
    return models;
  }

  /**
   * üí¨ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —á–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —á–µ—Ä–µ–∑ Windsurf
   */
  async generateChatResponse(
    messages: Array<{role: string, content: string}>,
    preferredVendor?: string,
    preferredModel?: string,
    options?: {
      temperature?: number;
      maxTokens?: number;
      systemPrompt?: string;
    }
  ): Promise<ChatResponse> {
    try {
      if (!this.initialized) {
        await this.initializeWindsurfModels();
      }

      // –í–∏–±–∏—Ä–∞—î–º–æ –º–æ–¥–µ–ª—å –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏
      let selectedModel: MockLanguageModelChat | null = null;

      if (preferredVendor && preferredModel) {
        // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –º–æ–¥–µ–ª—å
        const models = await MockWindsurfAPI.selectChatModels({
          vendor: preferredVendor,
          family: preferredModel
        });
        if (models.length > 0) {
          selectedModel = models[0];
        }
      } else if (preferredVendor) {
        // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –º–æ–¥–µ–ª—å –∑–∞ vendor
        const models = await MockWindsurfAPI.selectChatModels({
          vendor: preferredVendor
        });
        if (models.length > 0) {
          selectedModel = models[0];
        }
      }

      // Fallback –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –º–æ–¥–µ–ª—ñ
      if (!selectedModel) {
        selectedModel = this.currentModel;
      }

      // –û—Å—Ç–∞–Ω–Ω—ñ–π fallback - –±—É–¥—å-—è–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –º–æ–¥–µ–ª—å
      if (!selectedModel) {
        const allModels = await MockWindsurfAPI.selectChatModels();
        if (allModels.length > 0) {
          selectedModel = allModels[0];
        } else {
          throw new Error('No Windsurf models available');
        }
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó
      const messageTexts = messages.map(msg => msg.content);

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ —Å–∏–º—É–ª—è—Ü—ñ—é
      const content = await MockWindsurfAPI.sendRequest(selectedModel, messageTexts);

      const inputTokens = await MockWindsurfAPI.countTokens(messageTexts.join(' '));
      const outputTokens = await MockWindsurfAPI.countTokens(content);

      return {
        content: content.trim(),
        provider: `Windsurf (${selectedModel.vendor})`,
        model: selectedModel.family || selectedModel.name,
        vendor: selectedModel.vendor,
        tokens: {
          input: inputTokens,
          output: outputTokens
        }
      };

    } catch (error) {
      console.error('‚ùå Windsurf chat error:', error);
      
      // Fallback –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      return {
        content: `I apologize, but I encountered an issue accessing Windsurf models. Error: ${error instanceof Error ? error.message : 'Unknown error'}`,
        provider: 'Windsurf (Error)',
        model: 'fallback',
        vendor: 'windsurf'
      };
    }
  }

  /**
   * üß† –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–æ–¥—É —á–µ—Ä–µ–∑ Claude
   */
  async analyzeCode(
    code: string,
    filePath: string,
    analysisType: 'review' | 'bugs' | 'optimization' | 'documentation' | 'refactoring' = 'review'
  ): Promise<ChatResponse> {
    const analysisPrompts = {
      review: '–ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∫–æ–¥-—Ä–µ–≤\'—é —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É. –ü–æ–≥–ª—è–Ω—å –Ω–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É, —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å, –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏.',
      bugs: '–ó–Ω–∞–π–¥–∏ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –±–∞–≥–∏, –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –≤ —Ü—å–æ–º—É –∫–æ–¥—ñ.',
      optimization: '–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.',
      documentation: '–ü–µ—Ä–µ–≤—ñ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é –∫–æ–¥—É —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤.',
      refactoring: '–ó–∞–ø—Ä–æ–ø–æ–Ω—É–π –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫–æ–¥—É.'
    };

    const messages = [
      {
        role: 'system',
        content: `–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª—ñ–∑—É –∫–æ–¥—É. –§–∞–π–ª: ${filePath}. –¢–∏–ø –∞–Ω–∞–ª—ñ–∑—É: ${analysisType}.`
      },
      {
        role: 'user',
        content: `${analysisPrompts[analysisType]}\n\n–ö–æ–¥:\n\`\`\`\n${code}\n\`\`\``
      }
    ];

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Claude —è–∫ –Ω–∞–π–∫—Ä–∞—â–∏–π –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∫–æ–¥—É
    return await this.generateChatResponse(messages, 'anthropic', 'claude-3-5-sonnet');
  }

  /**
   * üßÆ –ü–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è HVAC —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
   */
  async hvacCalculationAssistance(
    calculatorType: string,
    inputData: any,
    userQuery: string
  ): Promise<ChatResponse> {
    const messages = [
      {
        role: 'system',
        content: `–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ HVAC —Å–∏—Å—Ç–µ–º —ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤ –≤–µ–Ω—Ç–∏–ª—è—Ü—ñ—ó. –î–æ–ø–æ–º–∞–≥–∞—î—à –∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º: ${calculatorType}.
        
–ö–æ–Ω—Ç–µ–∫—Å—Ç VentAI –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏:
- –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –≤–µ–Ω—Ç–∏–ª—è—Ü—ñ—ó —Ç–∞ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è
- –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –Ω–æ—Ä–º–∞—Ç–∏–≤–∏ —Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏
- –ï–Ω–µ—Ä–≥–æ–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º HVAC
- –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–µ–∫—Ç–Ω–∏—Ö —Ä—ñ—à–µ–Ω—å`
      },
      {
        role: 'user',
        content: `–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: ${calculatorType}
        
–í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ:
${JSON.stringify(inputData, null, 2)}

–ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${userQuery}`
      }
    ];

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Grok –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏—Ö —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —Ä—ñ—à–µ–Ω—å
    return await this.generateChatResponse(messages, 'xai', 'grok-3');
  }

  /**
   * üîç –ü–æ—à—É–∫ –Ω–∞–π–∫—Ä–∞—â–æ—ó –º–æ–¥–µ–ª—ñ –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è
   */
  async selectBestModel(taskType: 'code' | 'creative' | 'technical' | 'reasoning' | 'general'): Promise<string> {
    const modelPreferences = {
      code: ['anthropic', 'openai'],           // Claude –¥–ª—è –∫–æ–¥—É
      creative: ['xai', 'anthropic'],          // Grok –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ  
      technical: ['openai', 'google'],         // GPT –¥–ª—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
      reasoning: ['openai', 'google', 'deepseek'], // O3/Gemini –¥–ª—è —Ä–æ–∑–¥—É–º—ñ–≤
      general: ['anthropic', 'openai', 'google']   // –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—ñ
    };

    const preferences = modelPreferences[taskType] || modelPreferences.general;

    for (const vendor of preferences) {
      const models = await MockWindsurfAPI.selectChatModels({ vendor });
      if (models.length > 0) {
        return `${vendor}:${models[0].family || models[0].name}`;
      }
    }

    return 'windsurf:swe-1'; // Fallback –¥–æ Windsurf
  }

  /**
   * üîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –º–æ–¥–µ–ª–µ–π
   */
  async testAllModels(): Promise<{
    available: Array<{vendor: string, model: string, success: boolean}>;
    summary: {total: number, working: number, failed: number};
  }> {
    const results: Array<{vendor: string, model: string, success: boolean}> = [];
    
    try {
      const allModels = await MockWindsurfAPI.selectChatModels();
      
      for (const model of allModels.slice(0, 5)) { // –¢–µ—Å—Ç—É—î–º–æ –ø–µ—Ä—à—ñ 5 –º–æ–¥–µ–ª–µ–π
        try {
          const testMessages = ['Hello, test'];
          const response = await MockWindsurfAPI.sendRequest(model, testMessages);
          
          const hasResponse = response && response.length > 0;
          
          results.push({
            vendor: model.vendor,
            model: model.family || model.name,
            success: hasResponse
          });
          
        } catch (error) {
          results.push({
            vendor: model.vendor,
            model: model.family || model.name,
            success: false
          });
        }
      }
    } catch (error) {
      console.error('‚ùå Model testing failed:', error);
    }

    const working = results.filter(r => r.success).length;
    const failed = results.filter(r => !r.success).length;

    return {
      available: results,
      summary: {
        total: results.length,
        working,
        failed
      }
    };
  }

  /**
   * üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   */
  getProviderStatus(): {
    initialized: boolean;
    currentModel: string | null;
    totalProviders: number;
    totalModels: number;
  } {
    const totalModels = this.windsurfProviders.reduce((acc, provider) => 
      acc + provider.models.length, 0
    );

    return {
      initialized: this.initialized,
      currentModel: this.currentModel ? `${this.currentModel.vendor}:${this.currentModel.name}` : null,
      totalProviders: this.windsurfProviders.length,
      totalModels
    };
  }
}
