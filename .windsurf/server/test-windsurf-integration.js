#!/usr/bin/env node

/**
 * üåä Test Windsurf Native AI Integration
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏ –Ω–æ–≤–∏—Ö Windsurf –º–æ–¥–µ–ª–µ–π
 */

import { WindsurfAIProvider } from './dist/windsurf-ai-provider.js';

async function testWindsurfIntegration() {
  console.log('üåä Testing Windsurf Native AI Integration...\n');

  const provider = new WindsurfAIProvider();
  
  // –î–æ—á–µ–∫–∞—î–º–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  await new Promise(resolve => setTimeout(resolve, 2000));

  try {
    // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    console.log('üìä Provider Status:');
    const status = provider.getProviderStatus();
    console.log(JSON.stringify(status, null, 2));
    console.log('');

    // 2. –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤
    console.log('üìã Available Providers:');
    const providers = provider.getAvailableProviders();
    providers.forEach(p => {
      console.log(`  ‚úÖ ${p.name} (${p.vendor}): ${p.models.length} models`);
    });
    console.log('');

    // 3. –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∞—Ç—É
    console.log('üí¨ Testing Chat Completion...');
    try {
      const chatResponse = await provider.generateChatResponse([
        { role: 'user', content: 'Hello! Can you help me with HVAC calculations?' }
      ]);
      
      console.log(`Response from ${chatResponse.provider}:`);
      console.log(chatResponse.content.substring(0, 200) + '...');
      console.log(`Tokens: ${JSON.stringify(chatResponse.tokens)}\n`);
    } catch (error) {
      console.error('‚ùå Chat test failed:', error.message, '\n');
    }

    // 4. –¢–µ—Å—Ç –∞–Ω–∞–ª—ñ–∑—É –∫–æ–¥—É
    console.log('üîç Testing Code Analysis...');
    try {
      const codeAnalysis = await provider.analyzeCode(
        `function calculateAirflow(area, height) {
  return area * height * 6; // ACH of 6
}`,
        'test.js',
        'review'
      );
      
      console.log(`Code analysis from ${codeAnalysis.provider}:`);
      console.log(codeAnalysis.content.substring(0, 200) + '...\n');
    } catch (error) {
      console.error('‚ùå Code analysis test failed:', error.message, '\n');
    }

    // 5. –¢–µ—Å—Ç HVAC —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
    console.log('üßÆ Testing HVAC Calculations...');
    try {
      const hvacHelp = await provider.hvacCalculationAssistance(
        'Air Flow Calculator',
        { area: 20, height: 3, people: 4 },
        'How much ventilation do I need for this room?'
      );
      
      console.log(`HVAC assistance from ${hvacHelp.provider}:`);
      console.log(hvacHelp.content.substring(0, 200) + '...\n');
    } catch (error) {
      console.error('‚ùå HVAC calculation test failed:', error.message, '\n');
    }

    // 6. –¢–µ—Å—Ç –≤—Å—ñ—Ö –º–æ–¥–µ–ª–µ–π
    console.log('üß™ Testing All Models...');
    try {
      const testResults = await provider.testAllModels();
      
      console.log(`Model Test Results:`);
      console.log(`Total: ${testResults.summary.total}, Working: ${testResults.summary.working}, Failed: ${testResults.summary.failed}`);
      
      testResults.available.forEach(result => {
        const status = result.success ? '‚úÖ' : '‚ùå';
        console.log(`  ${status} ${result.vendor}:${result.model}`);
      });
      console.log('');
    } catch (error) {
      console.error('‚ùå Model testing failed:', error.message, '\n');
    }

    // 7. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤–∏–±–æ—Ä—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—ó –º–æ–¥–µ–ª—ñ
    console.log('üéØ Optimal Model Selection:');
    const taskTypes = ['code', 'creative', 'technical', 'reasoning', 'general'];
    
    for (const taskType of taskTypes) {
      try {
        const bestModel = await provider.selectBestModel(taskType);
        console.log(`  ${taskType}: ${bestModel}`);
      } catch (error) {
        console.log(`  ${taskType}: Error - ${error.message}`);
      }
    }
    console.log('');

    console.log('üéâ Windsurf Native AI Integration Test Completed!\n');
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    console.log('üí° Recommendations:');
    if (providers.length === 0) {
      console.log('  ‚ö†Ô∏è  No Windsurf providers available. Check your Windsurf installation.');
    } else {
      console.log(`  ‚úÖ ${providers.length} providers available`);
      console.log('  ‚úÖ Native integration provides better security and performance');
      console.log('  ‚úÖ No external API keys required');
      console.log('  ‚úÖ Uses your existing Windsurf subscription');
    }

  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
testWindsurfIntegration().catch(console.error);
