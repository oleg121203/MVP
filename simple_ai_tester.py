#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç—É–≤–∞–ª—å–Ω–∏–∫ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤ –±–µ–∑ MCP
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Claude Desktop –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
"""

import asyncio
import sys
import os
sys.path.append('/workspaces/MVP/backend')

from mcp_ai_providers import AIProviderManager

class SimpleAITester:
    """–ü—Ä–æ—Å—Ç–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è AI –±–µ–∑ Claude Desktop"""
    
    def __init__(self):
        self.ai_manager = AIProviderManager()
        
    async def initialize(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤"""
        print("ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤...")
        results = await self.ai_manager.initialize_all()
        
        for provider, success in results.items():
            status = "‚úÖ" if success else "‚ùå"
            print(f"  {status} {provider}")
            
        available = self.ai_manager.get_available_providers()
        if available:
            print(f"üöÄ –î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏: {', '.join(available)}")
            return True
        else:
            print("‚ùå –ñ–æ–¥–Ω–æ–≥–æ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!")
            return False
    
    async def test_hvac_analysis(self):
        """–¢–µ—Å—Ç HVAC –∞–Ω–∞–ª—ñ–∑—É"""
        print("\nüè¢ –¢–µ—Å—Ç—É—î–º–æ HVAC –∞–Ω–∞–ª—ñ–∑...")
        
        test_data = {
            "area": 150,
            "occupancy": 30, 
            "climate_zone": "temperate",
            "building_type": "office"
        }
        
        available = self.ai_manager.get_available_providers()
        if not available:
            print("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤")
            return
            
        provider = available[0]
        try:
            result = await self.ai_manager.analyze_hvac_with_provider(provider, test_data)
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥ {provider}:")
            print(f"   {result}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    async def interactive_chat(self):
        """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç –∑ AI"""
        print("\nüí¨ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º (–≤–≤–µ–¥—ñ—Ç—å 'exit' –¥–ª—è –≤–∏—Ö–æ–¥—É):")
        
        while True:
            try:
                query = input("\nüßë‚Äçüíª –í–∞—à –∑–∞–ø–∏—Ç: ").strip()
                
                if query.lower() in ['exit', 'quit', '–≤–∏—Ö—ñ–¥']:
                    print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                    break
                    
                if not query:
                    continue
                
                print("ü§î –û–±—Ä–æ–±–ª—è—é...")
                
                context = {
                    "system_info": "–¢–∏ AI –µ–∫—Å–ø–µ—Ä—Ç VentAI –¥–ª—è HVAC —Å–∏—Å—Ç–µ–º –≤ –£–∫—Ä–∞—ó–Ω—ñ. –ó–Ω–∞—î—à –î–ë–ù –í.2.5-67:2013."
                }
                
                result = await self.ai_manager.generate_with_fallback(query, context)
                
                if result.get("success"):
                    print(f"ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å ({result['provider_used']}):")
                    print(f"   {result['response']}")
                else:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {result.get('error')}")
                    
            except KeyboardInterrupt:
                print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            except Exception as e:
                print(f"‚ùå –°–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ VentAI Simple AI Tester")
    print("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Claude Desktop –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏")
    print("=" * 50)
    
    tester = SimpleAITester()
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    if not await tester.initialize():
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏")
        return
    
    print("\nüéØ –©–æ –±–∞–∂–∞—î—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏?")
    print("1. –®–≤–∏–¥–∫–∏–π HVAC —Ç–µ—Å—Ç")
    print("2. –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç") 
    print("3. –í—Å–µ —Ä–∞–∑–æ–º")
    
    try:
        choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä (1-3): ").strip()
        
        if choice == "1":
            await tester.test_hvac_analysis()
        elif choice == "2":
            await tester.interactive_chat()
        elif choice == "3":
            await tester.test_hvac_analysis()
            await tester.interactive_chat()
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä")
            
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")

if __name__ == "__main__":
    asyncio.run(main())
