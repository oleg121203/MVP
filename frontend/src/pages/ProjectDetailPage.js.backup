import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getProjectDetails, runComplianceCheckForProject, runOptimizationAnalysisForProject, analyzeDocument, refineAnalysis, generateCommercialProposalForProject, getSpecificationsByProject, createSpecification, updateSpecification, deleteSpecification, searchSpecifications } from '../services/apiService';
import { useAuth } from '../context/AuthContext';
import { useTheme } from '../context/ThemeContext';
import { useLocalization } from '../context/LocalizationContext';
import { useToast } from '../context/ToastContext';
import { Button } from '../components/ui';
import SpecificationFormModal from '../components/SpecificationFormModal';
import ProjectChatInterface from '../components/ProjectChatInterface';
import ProjectAnalysisWizard from '../components/ProjectAnalysisWizard';
import { FaChevronDown, FaChevronRight, FaCheckCircle, FaTimesCircle, FaExclamationTriangle, FaFileDownload, FaSearch, FaTools } from 'react-icons/fa';

// Inline styles
const styles = {
  container: {
    maxWidth: '1200px',
    margin: '0 auto',
    padding: '20px',
    fontFamily: 'Arial, sans-serif',
  },
  card: {
    backgroundColor: 'var(--card-bg-light, #ffffff)',
    borderRadius: '8px',
    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
    padding: '20px',
    marginBottom: '24px',
    border: '1px solid var(--border-light, #e2e8f0)',
  },
  heading: {
    fontSize: '1.875rem',
    fontWeight: '700',
    marginBottom: '0.75rem',
  },
  description: {
    fontSize: '1rem',
    marginBottom: '1.5rem',
    color: 'var(--text-color, #4b5563)',
  },
  sectionHeader: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    cursor: 'pointer',
    padding: '10px 0',
    borderBottom: '1px solid var(--border-light, #e5e7eb)',
    marginBottom: '15px',
  },
  sectionHeading: {
    fontSize: '1.25rem',
    fontWeight: '600',
    margin: 0,
  },
  button: {
    backgroundColor: 'var(--primary-color, #2563eb)',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    padding: '8px 16px',
    cursor: 'pointer',
    display: 'inline-flex',
    alignItems: 'center',
    gap: '8px',
    fontSize: '0.9rem',
  },
  buttonDisabled: {
    backgroundColor: 'var(--disabled-light, #9ca3af)',
    cursor: 'not-allowed',
  },
  table: {
    width: '100%',
    borderCollapse: 'collapse',
    marginTop: '15px',
    border: '1px solid var(--border-light, #e2e8f0)',
  },
  th: {
    backgroundColor: 'var(--table-header-bg-light, #f8f9fa)',
    padding: '12px',
    textAlign: 'left',
    borderBottom: '1px solid var(--border-light, #e5e7eb)',
    fontWeight: '600',
    fontSize: '0.75rem',
    textTransform: 'uppercase',
  },
  td: {
    padding: '12px',
    borderBottom: '1px solid var(--border-light, #e5e7eb)',
    verticalAlign: 'top',
    fontSize: '0.875rem',
  },
  compliant: {
    color: 'var(--success-light, #10b981)',
    display: 'flex',
    alignItems: 'center',
    gap: '4px',
  },
  nonCompliant: {
    color: 'var(--error-light, #ef4444)',
    display: 'flex',
    alignItems: 'center',
    gap: '4px',
  },
  warning: {
    color: 'var(--warning-light, #f59e0b)',
    display: 'flex',
    alignItems: 'center',
    gap: '4px',
  },
  statsContainer: {
    display: 'flex',
    flexWrap: 'wrap',
    gap: '1.5rem',
    padding: '1rem',
    backgroundColor: 'var(--table-header-bg-light, #f8f9fa)',
    borderRadius: '8px',
    marginBottom: '1rem',
  },
  statItem: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    minWidth: '100px',
  },
};

// Define API URL from environment variables with fallback
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';

const ProjectDetailPage = () => {
  // Hooks and context
  const { t } = useLocalization();
  const { token } = useAuth();
  const { theme } = useTheme();
  const { success, error, warning, info } = useToast();
  const { id } = useParams();
  const navigate = useNavigate();
  const fileInputRef = useRef(null);

  // Project state
  const [project, setProject] = useState(null);

  // Specification state
  const [specifications, setSpecifications] = useState([]);
  const [isLoadingSpecifications, setIsLoadingSpecifications] = useState(false);
  const [editingSpecification, setEditingSpecification] = useState(null);
  const [showSpecificationModal, setShowSpecificationModal] = useState(false);
  const [specificationSearchTerm, setSpecificationSearchTerm] = useState('');
  const [searchedSpecifications, setSearchedSpecifications] = useState([]);
  const [loading, setLoading] = useState(true);
  const [errorMessage, setErrorMessage] = useState('');

  // Document analysis state
  const [isUploading, setIsUploading] = useState(false);
  const [selectedFile, setSelectedFile] = useState(null);
  const [analysisSession, setAnalysisSession] = useState(null);
  const [analysisSessionId, setAnalysisSessionId] = useState(null);
  const [isAnalysisWizardOpen, setIsAnalysisWizardOpen] = useState(false);
  const [analysisQuestions, setAnalysisQuestions] = useState([]);
  const [analysisResult, setAnalysisResult] = useState(null);
  const [isAnalyzingDocument, setIsAnalyzingDocument] = useState(false);
  const [analysisError, setAnalysisError] = useState(null);

  // Compliance and optimization state
  const [complianceReport, setComplianceReport] = useState(null);
  const [isChecking, setIsChecking] = useState(false);
  const [optimizationReport, setOptimizationReport] = useState(null);
  const [isOptimizing, setIsOptimizing] = useState(false);
  const [isGeneratingProposal, setIsGeneratingProposal] = useState(false);

  // UI state
  const [expandedSections, setExpandedSections] = useState({
    compliance: true,
    optimization: true,
    recommendations: true,
    savings: true,
    extractedSpecs: true,
    specifications: true
  });

  // Fetch project details on component mount
  useEffect(() => {
    const fetchProjectDetails = async () => {
      try {
        setLoading(true);
        const projectData = await getProjectDetails(id);
        setProject(projectData);

        // Check for existing analysis session
        if (projectData.analysis_session_id) {
          const session = await getAnalysisSession(projectData.analysis_session_id);
          if (session.questions && session.questions.length > 0) {
            setAnalysisSession(session);
            setAnalysisQuestions(session.questions);
            setAnalysisResult(session.result);
          }
        }
      } catch (err) {
        console.error('Error fetching project details:', err);
        error(err.message || 'Failed to load project details');
        setErrorMessage('Failed to load project. Please try again.');
      } finally {
        setLoading(false);
      }
    };

    fetchProjectDetails();
  }, [id]);

  // Fetch specifications when project id changes
  useEffect(() => {
    if (!id) return;
    fetchSpecifications();
  }, [id]);

  // Fetch specifications helper
  const fetchSpecifications = async () => {
    setIsLoadingSpecifications(true);
    try {
      const specs = await getSpecificationsByProject(id);
      setSpecifications(specs);
      setSearchedSpecifications([]);
    } catch (err) {
      error(t('Failed to fetch specifications: ') + (err.message || t('Unknown error')));
    } finally {
      setIsLoadingSpecifications(false);
    }
  };

  // Create specification
  const handleCreateSpecification = () => {
    setEditingSpecification(null);
    setShowSpecificationModal(true);
  };

  // Edit specification
  const handleEditSpecification = (spec) => {
    setEditingSpecification(spec);
    setShowSpecificationModal(true);
  };

  // Save specification (create or update)
  const handleSaveSpecification = async (specData) => {
    try {
      if (editingSpecification) {
        await updateSpecification(editingSpecification.id, specData);
        success(t('Specification updated successfully'));
      } else {
        await createSpecification(id, specData);
        success(t('Specification created successfully'));
      }
      setShowSpecificationModal(false);
      setEditingSpecification(null);
      fetchSpecifications();
    } catch (err) {
      error(t('Failed to save specification: ') + (err.message || t('Unknown error')));
    }
  };

  // Delete specification
  const handleDeleteSpecification = async (specId) => {
    if (!window.confirm(t('Are you sure you want to delete this specification?'))) return;
    try {
      await deleteSpecification(specId);
      success(t('Specification deleted successfully'));
      fetchSpecifications();
    } catch (err) {
      error(t('Failed to delete specification: ') + (err.message || t('Unknown error')));
    }
  };

  // Search specifications
  const handleSearchSpecifications = async () => {
    if (!specificationSearchTerm) return;
    setIsLoadingSpecifications(true);
    try {
      const results = await searchSpecifications(id, specificationSearchTerm);
      setSearchedSpecifications(results);
    } catch (err) {
      error(t('Failed to search specifications: ') + (err.message || t('Unknown error')));
    } finally {
      setIsLoadingSpecifications(false);
    }
  };

  // Close specification modal
  const handleCloseSpecificationModal = () => {
    setShowSpecificationModal(false);
    setEditingSpecification(null);
  };

  // Handle file selection
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    // Validate file type
    const validTypes = [
      'application/pdf',
      'application/msword',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'image/jpeg',
      'image/png',
      'text/plain'
    ];

    if (!validTypes.includes(file.type)) {
      error('Invalid file type. Please upload a PDF, Word document, or image file.');
      return;
    }

    // Check file size (max 10MB)
    if (file.size > 10 * 1024 * 1024) {
      error('File size exceeds 10MB limit');
      return;
    }

    setSelectedFile(file);
  };

  // Handle file upload and analysis
  const handleUploadAndAnalyze = async () => {
    if (!selectedFile) {
      warning('Please select a file to upload');
      return;
    }

    try {
      setIsUploading(true);

      // Create FormData and append the file
      const formData = new FormData();
      formData.append('file', selectedFile);
      formData.append('project_id', id);

      // Call the API to upload and analyze the document
      const response = await analyzeDocument(formData);

      if (response.session_id) {
        setAnalysisSession({
          id: response.session_id,
          document_name: selectedFile.name,
          status: 'in_progress'
        });

        if (response.questions && response.questions.length > 0) {
          setAnalysisQuestions(response.questions);
          setIsAnalysisWizardOpen(true);
        } else {
          // No questions, show the result directly
          setAnalysisResult(response.result);
          success('Document analyzed successfully!');
        }
      }

      // Clear the file input
      setSelectedFile(null);
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }

    } catch (err) {
      console.error('Error analyzing document:', err);
      error(err.message || 'Failed to analyze document');
    } finally {
      setIsUploading(false);
    }
  };

  // Handle analysis wizard submission
  const handleAnalysisSubmit = async (answers) => {
    try {
      setIsAnalyzing(true);

      // Submit answers to the backend
      const response = await submitAnalysisResponse({
        session_id: analysisSession.id,
        answers: answers
      });

      if (response.complete) {
        // Analysis is complete
        setAnalysisResult(response.result);
        setAnalysisQuestions([]);
        setIsAnalysisWizardOpen(false);
        success('Analysis completed successfully!');

        // Refresh project data to get updated specifications
        const updatedProject = await getProjectDetails(id);
        setProject(updatedProject);
      } else if (response.questions && response.questions.length > 0) {
        // More questions to answer
        setAnalysisQuestions(response.questions);
      }

    } catch (err) {
      console.error('Error submitting analysis:', err);
      error(err.message || 'Failed to process analysis');
    } finally {
      setIsAnalyzing(false);
    }
  };

  // Handle analysis wizard close
  const handleAnalysisClose = () => {
    setIsAnalysisWizardOpen(false);
    setAnalysisQuestions([]);
  };

  // Toggle section expansion and other handlers are defined below with their complete implementations

  // handleGenerateProposal is defined below with the complete implementation

  // Render loading state
  if (loading && !project) {
    return (
      <div style={styles.loadingContainer}>
        <LoadingSpinner size="large" />
        <p>{t('Loading project details...')}</p>
      </div>
    );
  }

  // Render error state
  if (errorMessage) {
    return (
      <div style={styles.errorContainer}>
        <p>{errorMessage}</p>
        <Button onClick={() => window.location.reload()}>Retry</Button>
      </div>
    );
  }

  // Render project not found
  if (!project) {
    return (
      <div style={styles.notFoundContainer}>
        <h2>{t('Project not found')}</h2>
        <p>{t('The requested project could not be found.')}</p>
        <Button onClick={() => navigate('/projects')}>{t('Back to Projects')}</Button>
      </div>
    );
  }

  // Set isAnalyzingDocument alias for backward compatibility
  const isAnalyzing = isAnalyzingDocument;
  const setIsAnalyzing = setIsAnalyzingDocument;

  useEffect(() => {
    const fetchDetails = async () => {
      if (!id) {
        error(t('Invalid project ID'));
        return;
      }
      try {
        const projectData = await getProjectDetails(id);
        setProject(projectData);
        setIsChecking(true);
        const complianceData = await runComplianceCheckForProject(id);
        setComplianceReport(complianceData);
        setExpandedSections(prev => ({ ...prev, compliance: true }));
        success(t('Compliance check completed successfully'));
      } catch (err) {
        error(t('Error fetching project or checking compliance: ') + (err.message || t('Failed to fetch data')));
        console.error('Error fetching project or compliance:', err);

// Handle file selection
const handleFileChange = (e) => {
  const file = e.target.files[0];
  if (!file) return;

  // Validate file type
  const validTypes = [
    'application/pdf',
    'application/msword',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'image/jpeg',
    'image/png',
    'text/plain'
  ];

  if (!validTypes.includes(file.type)) {
    error('Invalid file type. Please upload a PDF, Word document, or image file.');
    return;
  }

  // Check file size (max 10MB)
  if (file.size > 10 * 1024 * 1024) {
    error('File size exceeds 10MB limit');
    return;
  }

  setSelectedFile(file);
};

// Handle file upload and analysis
const handleUploadAndAnalyze = async () => {
  if (!selectedFile) {
    warning('Please select a file to upload');
    return;
  }

  try {
    setIsUploading(true);

    // Create FormData and append the file
    const formData = new FormData();
    formData.append('file', selectedFile);
    formData.append('project_id', id);

    // Call the API to upload and analyze the document
    const response = await analyzeDocument(formData);

    if (response.session_id) {
      setAnalysisSession({
        id: response.session_id,
        document_name: selectedFile.name,
        status: 'in_progress'
      });

      if (response.questions && response.questions.length > 0) {
        setAnalysisQuestions(response.questions);
        setIsAnalysisWizardOpen(true);
      const response = await refineAnalysis(analysisSessionId, answers);
      setAnalysisQuestions(response.analysis.questions || []);
      setAnalysisResult(response.analysis);
      if (response.analysis.questions.length === 0) {
        success(t('Project analysis completed and specifications saved!'));
        const updatedProject = await getProjectDetails(id);
        setProject(updatedProject);
        setAnalysisSessionId(null);
        setAnalysisResult(null);
      } else {
        info(t('Please provide answers to the next set of questions.'));
      }
    } catch (err) {
    }

    // Clear the file input
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }

  } catch (err) {
    console.error('Error analyzing document:', err);
    const errorMessage = err.response?.data?.detail || err.message || 'Failed to process document';
    error(errorMessage);
    setAnalysisError(errorMessage);
  } finally {
    setIsUploading(false);
  }
};

// Handle optimization analysis
const handleOptimizationAnalysis = async () => {
  setIsOptimizing(true);
  setOptimizationReport(null);
  try {
    const response = await runOptimizationAnalysisForProject(id);
    setOptimizationReport(response);
    setExpandedSections(prev => ({ ...prev, optimization: true }));
    success(t('Optimization analysis completed successfully'));
  } catch (err) {
    error(t('Error optimizing project: ') + (err.message || t('Failed to optimize project')));
    console.error('Error optimizing project:', err);
  } finally {
    setIsOptimizing(false);
  }
};

// Handle generate proposal
const handleGenerateProposal = async () => {
  if (!project?.specifications || project.specifications.length === 0) {
    warning(t('Specifications are required to generate a commercial proposal'));
    return;
  }
  setIsGeneratingProposal(true);
  info(t('Starting commercial proposal generation. This may take a moment...'));
  try {
    // Updated: use axios blob response from generateCommercialProposalForProject
    const response = await generateCommercialProposalForProject(id);
    const blob = response.data;
    // Try to extract filename from Content-Disposition header (axios stores headers in response.headers)
    let filename = `${project.name.replace(/\s+/g, '_')}_commercial_proposal.docx`;
    const contentDisposition = response.headers && response.headers['content-disposition'];
    if (contentDisposition) {
      const filenameMatch = contentDisposition.match(/filename="([^"]+)"/i);
      if (filenameMatch && filenameMatch[1]) {
        filename = filenameMatch[1];
      }
    }
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.style.display = 'none';
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
    success(t('Commercial proposal generated and downloaded successfully'));
    setTimeout(() => {
      info({
        title: t('Download Started'),
        message: t('If your download hasn\'t started automatically, check your browser\'s download settings.'),
      });
    }, 2500);
  } catch (err) {
    error({
      title: t('Error Generating Proposal'),
      message: err.message || t('Failed to create commercial proposal.'),
    });
    console.error('Failed to generate proposal:', err);
  } finally {
    setIsGeneratingProposal(false);
  }
};

// Toggle section expansion
const toggleSection = (section) => {
  setExpandedSections(prev => ({ ...prev, [section]: !prev[section] }));
};

// Render loading state
if (loading && !project) {
  return (
    <div style={styles.loadingContainer}>
      <LoadingSpinner size="large" />
      <p>{t('Loading project details...')}</p>
    </div>
  );
}

// Render error state
if (errorMessage) {
  return (
    <div style={styles.errorContainer}>
      <p>{errorMessage}</p>
      <Button onClick={() => window.location.reload()}>Retry</Button>
    </div>
  );
}

// Render project not found
if (!project) {
  return (
    <div style={styles.notFoundContainer}>
      <h2>{t('Project not found')}</h2>
      <p>{t('The requested project could not be found.')}</p>
      <Button onClick={() => navigate('/projects')}>{t('Back to Projects')}</Button>
    </div>
  );
}

// Set isAnalyzingDocument alias for backward compatibility
const isAnalyzing = isAnalyzingDocument;
const setIsAnalyzing = setIsAnalyzingDocument;

useEffect(() => {
  const fetchDetails = async () => {
    if (!id) {
      error(t('Invalid project ID'));
      return;
    }
    try {
      const projectData = await getProjectDetails(id);
      setProject(projectData);
      setIsChecking(true);
      const complianceData = await runComplianceCheckForProject(id);
      setComplianceReport(complianceData);
      setExpandedSections(prev => ({ ...prev, compliance: true }));
      success(t('Compliance check completed successfully'));
    } catch (err) {
      error(t('Error fetching project or checking compliance: ') + (err.message || t('Failed to fetch data')));
      console.error('Error fetching project or compliance:', err);

// Theme-aware styles
const themedStyles = {
  container: {
    ...styles.container,
    color: theme === 'dark' ? '#e5e7eb' : '#374151',
  },
  card: {
    ...styles.card,
    backgroundColor: theme === 'dark' ? '#1e293b' : '#ffffff',
    border: `1px solid ${theme === 'dark' ? '#334155' : '#e2e8f0'}`,
  },
  heading: {
    ...styles.heading,
    color: theme === 'dark' ? '#f9fafb' : '#111827',
  },
  description: {
    ...styles.description,
    color: theme === 'dark' ? '#d1d5db' : '#4b5563',
  },
  sectionHeading: {
    ...styles.sectionHeading,
    color: theme === 'dark' ? '#f9fafb' : '#111827',
  },
  sectionHeader: {
    ...styles.sectionHeader,
    borderBottom: `1px solid ${theme === 'dark' ? '#334155' : '#e2e8f0'}`,
  },
  table: {
    ...styles.table,
    backgroundColor: theme === 'dark' ? '#1e293b' : '#ffffff',
    border: `1px solid ${theme === 'dark' ? '#334155' : '#e2e8f0'}`,
  },
  th: {
    ...styles.th,
    backgroundColor: theme === 'dark' ? '#1f2937' : '#f9fafb',
    color: theme === 'dark' ? '#9ca3af' : '#4b5563',
  },
  td: {
    ...styles.td,
    backgroundColor: theme === 'dark' ? 'rgba(255, 255, 255, 0.02)' : 'rgba(0, 0, 0, 0.01)',
    borderBottom: `1px solid ${theme === 'dark' ? '#1f2937' : '#f3f4f6'}`,
  },
};
      setOptimizationReport(response);
      setExpandedSections(prev => ({ ...prev, optimization: true }));
      success(t('Optimization analysis completed successfully'));
    } catch (err) {
      error(t('Error optimizing project: ') + (err.message || t('Failed to optimize project')));
      console.error('Error optimizing project:', err);
    } finally {
      setIsOptimizing(false);
    }
  };

  const handleGenerateProposal = async () => {
    if (!project?.specifications || project.specifications.length === 0) {
      warning(t('Specifications are required to generate a commercial proposal'));
      return;
    }
    setIsGeneratingProposal(true);
    info(t('Starting commercial proposal generation. This may take a moment...'));
    try {
      const response = await generateCommercialProposalForProject(id);
      const blob = await response.blob();
      const contentDisposition = response.headers.get('Content-Disposition');
      let filename = `${project.name.replace(/\s+/g, '_')}_commercial_proposal.docx`;
      if (contentDisposition) {
        const filenameMatch = contentDisposition.match(/filename="([^"]+)"/i);
        if (filenameMatch && filenameMatch[1]) {
          filename = filenameMatch[1];
        }
      }
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.style.display = 'none';
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      success(t('Commercial proposal generated and downloaded successfully'));
      setTimeout(() => {
        info({
          title: t('Download Started'),
          message: t('If your download hasn\'t started automatically, check your browser\'s download settings.'),
        });
      }, 2500);
    } catch (err) {
      error({
        title: t('Error Generating Proposal'),
        message: err.message || t('Failed to create commercial proposal.'),
      });
      console.error('Failed to generate proposal:', err);
    } finally {
      setIsGeneratingProposal(false);
    }
  };

  const toggleSection = (section) => {
    setExpandedSections(prev => ({ ...prev, [section]: !prev[section] }));
  };

  if (!project) {
    return <div style={{ ...styles.container, textAlign: 'center' }}>{t('Loading...')}</div>;
  }

  // Theme-aware styles
  const themedStyles = {
    container: {
      ...styles.container,
      color: theme === 'dark' ? '#e5e7eb' : '#374151',
    },
    card: {
      ...styles.card,
      backgroundColor: theme === 'dark' ? '#1e293b' : '#ffffff',
      border: `1px solid ${theme === 'dark' ? '#334155' : '#e2e8f0'}`,
    },
    heading: {
      ...styles.heading,
      color: theme === 'dark' ? '#f9fafb' : '#111827',
    },
    description: {
      ...styles.description,
      color: theme === 'dark' ? '#d1d5db' : '#4b5563',
    },
    sectionHeading: {
      ...styles.sectionHeading,
      color: theme === 'dark' ? '#f9fafb' : '#111827',
    },
    sectionHeader: {
      ...styles.sectionHeader,
      borderBottom: `1px solid ${theme === 'dark' ? '#334155' : '#e2e8f0'}`,
    },
    table: {
      ...styles.table,
      backgroundColor: theme === 'dark' ? '#1e293b' : '#ffffff',
      border: `1px solid ${theme === 'dark' ? '#334155' : '#e2e8f0'}`,
    },
    th: {
      ...styles.th,
      backgroundColor: theme === 'dark' ? '#1f2937' : '#f9fafb',
      color: theme === 'dark' ? '#9ca3af' : '#4b5563',
    },
    td: {
      ...styles.td,
      backgroundColor: theme === 'dark' ? 'rgba(255, 255, 255, 0.02)' : 'rgba(0, 0, 0, 0.01)',
      borderBottom: `1px solid ${theme === 'dark' ? '#1f2937' : '#f3f4f6'}`,
    },
  };

  return (
    <div style={themedStyles.container}>
      <h2 style={themedStyles.heading}>{project.name}</h2>
      <p style={themedStyles.description}>{project.description}</p>

      {/* Compliance Check Section */}
      <div style={themedStyles.card}>
        <div style={themedStyles.sectionHeader}>
          <h3 style={themedStyles.sectionHeading}>{t('DBN Compliance Check')}</h3>
          <button
            onClick={handleComplianceCheck}
            disabled={isChecking}
            style={{
              ...styles.button,
              ...(isChecking ? styles.buttonDisabled : {}),
            }}
          >
            <FaSearch style={{ marginRight: '8px' }} />
            {isChecking ? t('Checking...') : t('Run Compliance Check')}
          </button>
        </div>
        {complianceReport && expandedSections.compliance && (
          <div>
            <div style={themedStyles.statsContainer}>
              <div style={themedStyles.statItem}>
                <span style={{ fontSize: '0.875rem', color: theme === 'dark' ? '#9ca3af' : '#4b5563' }}>
                  {t('Total Items')}:
                </span>
                <span style={{ fontSize: '1.25rem', fontWeight: '600' }}>
                  {complianceReport.report?.length || 0}
                </span>
              </div>
              <div style={themedStyles.statItem}>
                <span style={{ fontSize: '0.875rem', color: theme === 'dark' ? '#9ca3af' : '#4b5563' }}>
                  {t('Compliant')}:
                </span>
                <span style={styles.compliant}>
                  <FaCheckCircle />
                  {complianceReport.report?.filter(check => check.status === 'ВІДПОВІДАЄ').length || 0}
                </span>
              </div>
              <div style={themedStyles.statItem}>
                <span style={{ fontSize: '0.875rem', color: theme === 'dark' ? '#9ca3af' : '#4b5563' }}>
                  {t('Non-Compliant')}:
                </span>
                <span style={styles.nonCompliant}>
                  <FaTimesCircle />
                  {complianceReport.report?.filter(check => check.status === 'НЕВІДПОВІДНІСТЬ').length || 0}
                </span>
              </div>
              <div style={themedStyles.statItem}>
                <span style={{ fontSize: '0.875rem', color: theme === 'dark' ? '#9ca3af' : '#4b5563' }}>
                  {t('Needs Clarification')}:
                </span>
                <span style={styles.warning}>
                  <FaExclamationTriangle />
                  {complianceReport.report?.filter(check => check.status === 'ПОТРЕБУЄ УТОЧНЕННЯ').length || 0}
                </span>
              </div>
            </div>
            <table style={themedStyles.table}>
              <thead>
                <tr>
                  <th style={themedStyles.th}>{t('Parameter')}</th>
                  <th style={themedStyles.th}>{t('Project Value')}</th>
                  <th style={themedStyles.th}>{t('Normative Value')}</th>
                  <th style={themedStyles.th}>{t('Status')}</th>
                  <th style={themedStyles.th}>{t('Justification')}</th>
                </tr>
              </thead>
              <tbody>
                {complianceReport.report?.map((row, index) => (
                  <tr
                    key={index}
                    style={{
                      backgroundColor: index % 2 === 0 ? (theme === 'dark' ? 'rgba(255, 255, 255, 0.02)' : 'rgba(0, 0, 0, 0.01)') : 'transparent',
                    }}
                  >
                    <td style={themedStyles.td}>
                      {row.parameter}
                      {row.status === 'НЕВІДПОВІДНІСТЬ' && (
                        <span style={{ ...styles.nonCompliant, marginLeft: '8px' }}>
                          <FaExclamationTriangle />
                        </span>
                      )}
                    </td>
                    <td style={themedStyles.td}>{row.project_value}</td>
                    <td style={themedStyles.td}>{row.normative_value}</td>
                    <td style={themedStyles.td}>
                      <span
                        style={
                          row.status === 'ВІДПОВІДАЄ' ? styles.compliant :
                          row.status === 'НЕВІДПОВІДНІСТЬ' ? styles.nonCompliant :
                          styles.warning
                        }
                      >
                        {row.status === 'ВІДПОВІДАЄ' ? (
                          <>
                            <FaCheckCircle />
                            {t('Compliant')}
                          </>
                        ) : row.status === 'НЕВІДПОВІДНІСТЬ' ? (
                          <>
                            <FaTimesCircle />
                            {t('Non-Compliant')}
                          </>
                        ) : (
                          <>
                            <FaExclamationTriangle />
                            {t('Needs Clarification')}
                          </>
                        )}
                      </span>
                    </td>
                    <td style={themedStyles.td}>
                      {row.justification}
                      {row.dbn_clause_reference && (
                        <p style={{ fontSize: '0.75rem', color: theme === 'dark' ? '#38bdf8' : '#0ea5e9', marginTop: '4px' }}>
                          {t('Reference')}: {row.dbn_clause_reference}
                        </p>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Optimization Analysis Section */}
      <div style={themedStyles.card}>
        <div style={themedStyles.sectionHeader}>
          <h3 style={themedStyles.sectionHeading}>{t('AI Project Optimization')}</h3>
          <button
            onClick={handleOptimizationAnalysis}
            disabled={isOptimizing}
            style={{
              ...styles.button,
              ...(isOptimizing ? styles.buttonDisabled : {}),
            }}
          >
            <FaTools style={{ marginRight: '8px' }} />
            {isOptimizing ? t('Analyzing...') : t('Run Optimization')}
          </button>
        </div>
        {optimizationReport && expandedSections.optimization && (
          <div>
            <div style={{ ...themedStyles.sectionHeader, cursor: 'pointer' }} onClick={() => toggleSection('recommendations')}>
              <h4 style={{ fontSize: '1.125rem', fontWeight: '600', margin: 0 }}>{t('Optimization Recommendations')}</h4>
              <FaChevronDown style={{ transform: expandedSections.recommendations ? 'rotate(0deg)' : 'rotate(-90deg)', transition: 'transform 0.2s' }} />
            </div>
            {expandedSections.recommendations && (
              <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>
                {optimizationReport.optimizations?.map((rec, index) => (
                  <li
                    key={index}
                    style={{
                      padding: '12px',
                      marginBottom: '8px',
                      backgroundColor: theme === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.02)',
                      borderRadius: '6px',
                      display: 'flex',
                      flexDirection: 'column',
                      gap: '8px',
                    }}
                  >
                    <div style={{ display: 'flex', alignItems: 'flex-start', gap: '12px' }}>
                      <span style={{ fontSize: '1.25rem' }}>💡</span>
                      <div style={{ flex: 1 }}>
                        <div style={{ fontWeight: 'bold', marginBottom: '4px' }}>{rec.category}</div>
                        <div style={{ marginBottom: '4px' }}><strong>{t('Problem')}:</strong> {rec.problem}</div>
                        <div style={{ marginBottom: '4px' }}><strong>{t('Solution')}:</strong> {rec.solution}</div>
                        <div><strong>{t('Expected Effect')}:</strong> {rec.expected_effect}</div>
                      </div>
                    </div>
                    {(rec.estimated_cost_savings_uah || rec.estimated_energy_savings_kwh_year || rec.estimated_installation_time_savings_hours) && (
                      <div
                        style={{
                          marginTop: '8px',
                          padding: '8px',
                          backgroundColor: theme === 'dark' ? 'rgba(59, 130, 246, 0.1)' : 'rgba(219, 234, 254, 0.8)',
                          borderRadius: '4px',
                          display: 'flex',
                          flexWrap: 'wrap',
                          gap: '16px',
                        }}
                      >
                        {rec.estimated_cost_savings_uah > 0 && (
                          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                            <span style={{ color: '#10b981' }}>💰</span>
                            <span>
                              <strong>{t('Cost Savings')}:</strong> {rec.estimated_cost_savings_uah.toLocaleString()} {t('UAH')}
                            </span>
                          </div>
                        )}
                        {rec.estimated_energy_savings_kwh_year > 0 && (
                          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                            <span style={{ color: '#3b82f6' }}>⚡</span>
                            <span>
                              <strong>{t('Energy Savings')}:</strong> {rec.estimated_energy_savings_kwh_year.toLocaleString()} {t('kWh/year')}
                            </span>
                          </div>
                        )}
                        {rec.estimated_installation_time_savings_hours > 0 && (
                          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                            <span style={{ color: '#f59e0b' }}>⏱️</span>
                            <span>
                              <strong>{t('Installation Time Savings')}:</strong> {rec.estimated_installation_time_savings_hours.toLocaleString()} {t('hours')}
                            </span>
                          </div>
                        )}
                      </div>
                    )}
                  </li>
                ))}
              </ul>
            )}
            <div style={{ ...themedStyles.sectionHeader, cursor: 'pointer', marginTop: '24px' }} onClick={() => toggleSection('savings')}>
              <h4 style={{ fontSize: '1.125rem', fontWeight: '600', margin: 0 }}>{t('Potential Savings')}</h4>
              <FaChevronDown style={{ transform: expandedSections.savings ? 'rotate(0deg)' : 'rotate(-90deg)', transition: 'transform 0.2s' }} />
            </div>
            {expandedSections.savings && (
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(220px, 1fr))', gap: '16px', marginTop: '8px' }}>
                <div
                  style={{
                    backgroundColor: theme === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.02)',
                    padding: '16px',
                    borderRadius: '6px',
                    textAlign: 'center',
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'space-between',
                  }}
                >
                  <div style={{ color: theme === 'dark' ? '#9ca3af' : '#4b5563', marginBottom: '8px' }}>
                    {t('Total Cost Savings')}:
                  </div>
                  <div style={{ fontSize: '1.25rem', fontWeight: '600', color: '#10b981' }}>
                    {optimizationReport.total_estimated_cost_savings_uah?.toLocaleString() || 0} {t('UAH')}
                  </div>
                  <div style={{ fontSize: '0.875rem', color: theme === 'dark' ? '#9ca3af' : '#6b7280', marginTop: '8px' }}>
                    {t('Based on all recommendations')}
                  </div>
                </div>
                <div
                  style={{
                    backgroundColor: theme === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.02)',
                    padding: '16px',
                    borderRadius: '6px',
                    textAlign: 'center',
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'space-between',
                  }}
                >
                  <div style={{ color: theme === 'dark' ? '#9ca3af' : '#4b5563', marginBottom: '8px' }}>
                    {t('Energy Savings')}:
                  </div>
                  <div style={{ fontSize: '1.25rem', fontWeight: '600', color: '#3b82f6' }}>
                    {optimizationReport.total_estimated_energy_savings_kwh_year?.toLocaleString() || 0} {t('kWh/year')}
                  </div>
                  <div style={{ fontSize: '0.875rem', color: theme === 'dark' ? '#9ca3af' : '#6b7280', marginTop: '8px' }}>
                    {t('Reduced energy consumption')}
                  </div>
                </div>
                <div
                  style={{
                    backgroundColor: theme === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.02)',
                    padding: '16px',
                    borderRadius: '6px',
                    textAlign: 'center',
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'space-between',
                  }}
                >
                  <div style={{ color: theme === 'dark' ? '#9ca3af' : '#4b5563', marginBottom: '8px' }}>
                    {t('Installation Time Savings')}:
                  </div>
                  <div style={{ fontSize: '1.25rem', fontWeight: '600', color: '#f59e0b' }}>
                    {optimizationReport.total_estimated_installation_time_savings_hours?.toLocaleString() || 0} {t('hours')}
                  </div>
                  <div style={{ fontSize: '0.875rem', color: theme === 'dark' ? '#9ca3af' : '#6b7280', marginTop: '8px' }}>
                    {t('Faster implementation')}
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Commercial Proposal Section */}
      <div style={themedStyles.card}>
        <div style={themedStyles.sectionHeader}>
          <h3 style={themedStyles.sectionHeading}>{t('Commercial Proposal')}</h3>
          <button
            onClick={handleGenerateProposal}
            disabled={!project.specifications || project.specifications.length === 0 || isGeneratingProposal}
            style={{
              ...styles.button,
              ...((!project.specifications || project.specifications.length === 0 || isGeneratingProposal) ? styles.buttonDisabled : {}),
            }}
          >
            <FaFileDownload style={{ marginRight: '8px' }} />
            {isGeneratingProposal ? t('Generating...') : t('Generate Commercial Proposal')}
          </button>
        </div>
        {(!project.specifications || project.specifications.length === 0) && (
          <p style={{ marginTop: '12px', color: theme === 'dark' ? '#fbbf24' : '#d97706', fontSize: '0.875rem', fontStyle: 'italic' }}>
            {t('Project specifications are required to generate a commercial proposal')}
          </p>
        )}
      </div>

      {/* Document Upload Section */}
      <div style={themedStyles.card}>
        <div style={themedStyles.sectionHeader}>
          <h3 style={themedStyles.sectionHeading}>{t('Analyze Project Document')}</h3>
          <input
            type="file"
            id="projectDocumentUpload"
            style={{ display: 'none' }}
            onChange={handleDocumentUpload}
            disabled={isAnalyzingDocument}
          />
          <button
            onClick={() => document.getElementById('projectDocumentUpload').click()}
            disabled={isAnalyzingDocument}
            style={{
              ...styles.button,
              ...(isAnalyzingDocument ? styles.buttonDisabled : {}),
            }}
          >
            <FaSearch style={{ marginRight: '8px' }} />
            {isAnalyzingDocument ? t('Analyzing...') : t('Upload Project Document')}
          </button>
        </div>
        {(analysisSessionId && analysisQuestions.length > 0) && (
          <p style={{ marginTop: '12px', color: theme === 'dark' ? '#38bdf8' : '#0ea5e9', fontSize: '0.875rem' }}>
            {t('AI is asking for clarification. Please answer the questions below.')}
          </p>
        )}
      </div>

      {/* Project Analysis Wizard */}
      {analysisSessionId && analysisQuestions.length > 0 && (
        <ProjectAnalysisWizard
          sessionId={analysisSessionId}
          questions={analysisQuestions}
          onRefine={handleRefineAnalysis}
          onComplete={handleAnalysisComplete}
          currentAnalysis={analysisResult}
        />
      )}

      {/* Extracted Specifications Section */}
      {analysisSessionId && analysisQuestions.length === 0 && analysisResult?.specifications?.length > 0 && (
        <div style={themedStyles.card}>
          <div style={{ ...themedStyles.sectionHeader, cursor: 'pointer' }} onClick={() => toggleSection('extractedSpecs')}>
            <h3 style={themedStyles.sectionHeading}>{t('Extracted Specifications')}</h3>
            <FaChevronDown style={{ transform: expandedSections.extractedSpecs ? 'rotate(0deg)' : 'rotate(-90deg)', transition: 'transform 0.2s' }} />
          </div>
          {expandedSections.extractedSpecs && (
            <div>
              <table style={themedStyles.table}>
                <thead>
                  <tr>
                    <th style={themedStyles.th}>{t('Component Type')}</th>
                    <th style={themedStyles.th}>{t('Name')}</th>
                    <th style={themedStyles.th}>{t('Quantity')}</th>
                    <th style={themedStyles.th}>{t('Unit')}</th>
                    <th style={themedStyles.th}>{t('Dimensions')}</th>
                    <th style={themedStyles.th}>{t('Airflow (m³/h)')}</th>
                    <th style={themedStyles.th}>{t('Pressure (Pa)')}</th>
                    <th style={themedStyles.th}>{t('Power (kW)')}</th>
                    <th style={themedStyles.th}>{t('Noise (dBA)')}</th>
                    <th style={themedStyles.th}>{t('Voltage (V)')}</th>
                    <th style={themedStyles.th}>{t('Notes')}</th>
                  </tr>
                </thead>
                <tbody>
                  {analysisResult.specifications.map((spec, index) => (
                    <tr
                      key={index}
                      style={{
                        backgroundColor: index % 2 === 0 ? (theme === 'dark' ? 'rgba(255, 255, 255, 0.02)' : 'rgba(0, 0, 0, 0.01)') : 'transparent',
                      }}
                    >
                      <td style={themedStyles.td}>{spec.component_type}</td>
                      <td style={themedStyles.td}>{spec.name}</td>
                      <td style={themedStyles.td}>{spec.quantity}</td>
                      <td style={themedStyles.td}>{spec.unit}</td>
                      <td style={themedStyles.td}>{JSON.stringify(spec.dimensions || {})}</td>
                      <td style={themedStyles.td}>{spec.airflow_rate_m3h}</td>
                      <td style={themedStyles.td}>{spec.pressure_pa}</td>
                      <td style={themedStyles.td}>{spec.power_kw}</td>
                      <td style={themedStyles.td}>{spec.noise_level_db}</td>
                      <td style={themedStyles.td}>{spec.voltage_v}</td>
                      <td style={themedStyles.td}>{spec.notes}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
              <p style={{ marginTop: '16px', fontSize: '0.875rem', color: theme === 'dark' ? '#9ca3af' : '#6b7280' }}>
                {t('These specifications have been extracted and saved to your project.')}
              </p>
            </div>
          )}
        </div>
      )}

      {/* Specifications Section */}
      <div style={themedStyles.card}>
        <div style={themedStyles.sectionHeader}>
          <h3 style={themedStyles.sectionHeading}>{t('Specifications')}</h3>
          <div style={{ display: 'flex', gap: '8px' }}>
            <input
              type="text"
              placeholder={t('Search specifications...')}
              value={specificationSearchTerm}
              onChange={e => setSpecificationSearchTerm(e.target.value)}
              style={{ padding: '6px', borderRadius: '4px', border: '1px solid #e5e7eb', marginRight: '8px' }}
              onKeyDown={e => e.key === 'Enter' && handleSearchSpecifications()}
            />
            <button style={styles.button} onClick={handleSearchSpecifications} disabled={!specificationSearchTerm}>
              <FaSearch style={{ marginRight: '6px' }} />{t('Search')}
            </button>
            <button style={styles.button} onClick={handleCreateSpecification}>
              + {t('Add Specification')}
            </button>
          </div>
        </div>
        {isLoadingSpecifications ? (
          <div>{t('Loading specifications...')}</div>
        ) : (
          <table style={themedStyles.table}>
            <thead>
              <tr>
                <th style={themedStyles.th}>{t('Component Type')}</th>
                <th style={themedStyles.th}>{t('Name')}</th>
                <th style={themedStyles.th}>{t('Quantity')}</th>
                <th style={themedStyles.th}>{t('Unit')}</th>
                <th style={themedStyles.th}>{t('Dimensions')}</th>
                <th style={themedStyles.th}>{t('Notes')}</th>
                <th style={themedStyles.th}>{t('Actions')}</th>
              </tr>
            </thead>
            <tbody>
              {(specificationSearchTerm && searchedSpecifications.length > 0 ? searchedSpecifications : specifications).map((spec, idx) => (
                <tr key={spec.id || idx}>
                  <td style={themedStyles.td}>{spec.component_type}</td>
                  <td style={themedStyles.td}>{spec.name}</td>
                  <td style={themedStyles.td}>{spec.quantity}</td>
                  <td style={themedStyles.td}>{spec.unit}</td>
                  <td style={themedStyles.td}>{JSON.stringify(spec.dimensions || {})}</td>
                  <td style={themedStyles.td}>{spec.notes}</td>
                  <td style={themedStyles.td}>
                    <button style={{ ...styles.button, marginRight: '4px' }} onClick={() => handleEditSpecification(spec)}>{t('Edit')}</button>
                    <button style={{ ...styles.button, backgroundColor: '#ef4444' }} onClick={() => handleDeleteSpecification(spec.id)}>{t('Delete')}</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>

      {/* Specification Modal */}
      {showSpecificationModal && (
        <SpecificationFormModal
          show={showSpecificationModal}
          onClose={handleCloseSpecificationModal}
          onSave={handleSaveSpecification}
          specification={editingSpecification}
        />
      )}

      {/* Project Chat Section */}
      <ProjectChatInterface projectId={id} />
    </div>
  );
};

export default ProjectDetailPage;
