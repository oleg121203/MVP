
services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ventai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ventai_db}
      POSTGRES_USER: ${POSTGRES_USER:-ventai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ventai_user} -d ${POSTGRES_DB:-ventai_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ventai-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: ventai-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass $${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ventai-network

  # Vent.AI Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ventai-backend:latest
    container_name: ventai-backend
    restart: unless-stopped
    env_file:
      - ../../.env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ventai_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-ventai_db}
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
      - OLLAMA_MODEL_NAME=${OLLAMA_MODEL_NAME}
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
    volumes:
      - ./backend/logs:/app/logs
    ports:
      - "8000:8000"
    command: ["./venv/bin/python", "src/fastapi_app/main.py"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ventai-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ventai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./build:/usr/share/nginx/html:ro
    depends_on:
      - backend
    networks:
      - ventai-network

volumes:
  postgres_data:
    name: ventai_postgres_data
  redis_data:
    name: ventai_redis_data

networks:
  ventai-network:
    name: ventai-network
    driver: bridge
