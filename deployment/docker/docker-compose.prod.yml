version: '3.8'

services:
  # PostgreSQL Database with optimized settings for production
  postgres:
    image: postgres:15-alpine
    container_name: ventai-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ventai_prod}
      POSTGRES_USER: ${POSTGRES_USER:-ventai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "127.0.0.1:5432:5432"  # Bind only to localhost for security
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ventai_user} -d ${POSTGRES_DB:-ventai_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - ventai-network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: ventai-redis-prod
    restart: always
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-your_redis_password}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-your_redis_password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - ventai-network

  # Vent.AI Backend API with production optimizations
  backend:
    build:
      context: ./vent-ai-backend
      dockerfile: Dockerfile
    container_name: ventai-backend-prod
    restart: always
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ventai_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-ventai_prod}
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-your_redis_password}@redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - WORKERS=4
    volumes:
      - ./vent-ai-backend/logs:/app/logs
      - ./uploads:/app/uploads
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    networks:
      - ventai-network

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: ventai-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/build:/usr/share/nginx/html:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - ventai-network

  # Log aggregation (optional)
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: ventai-logs
    restart: unless-stopped
    volumes:
      - ./fluentd/conf:/fluentd/etc
      - ./logs:/fluentd/log
    ports:
      - "127.0.0.1:24224:24224"
    networks:
      - ventai-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ventai-monitoring
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - ventai-network

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: ventai-backup
    restart: "no"
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - postgres
    command: /bin/sh -c "chmod +x /backup.sh && /backup.sh"
    networks:
      - ventai-network

volumes:
  postgres_data:
    name: ventai_postgres_prod_data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/ventai_postgres_data
  redis_data:
    name: ventai_redis_prod_data
  prometheus_data:
    name: ventai_prometheus_data

networks:
  ventai-network:
    name: ventai-prod-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
